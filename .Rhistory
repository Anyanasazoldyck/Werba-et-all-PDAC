all_samples <- readRDS("D:/PDAC_SCRNA/objects/all_seurat_complete_infercnv.rds")
setwd("D:/PDAC_SCRNA")
set.seed(1)
data.avg <- rnorm(10)
nbin <- 3
data.cut <- ggplot2::cut_number(data.avg + rnorm(length(data.avg))/1e30,
n = nbin,
labels = FALSE)
data.cut
data.cut <- ggplot2::cut_number(data.avg ,
n = nbin,
labels = FALSE)
data.cut
data.cut <- ggplot2::cut_number(data.avg ,
n = nbin,
labels = FALSE)
data.cut
data.avg
set.seed(1)
data.avg <- rnorm(100)
nbin <- 3
data.cut <- ggplot2::cut_number(data.avg + rnorm(length(data.avg))/1e30,
n = nbin,
labels = FALSE)
data.cut
data.cut1 <- ggplot2::cut_number(data.avg + rnorm(length(data.avg))/1e30,
n = nbin,
labels = FALSE)
data.cut <- ggplot2::cut_number(data.avg ,
n = nbin,
labels = FALSE)
print(data.cut==data.cut1)
treated_ch <- readRDS("D:/PDAC_SCRNA/objects/treated_ch.rds")
naive_ch <- readRDS("D:/PDAC_SCRNA/objects/naive_ch.rds")
groupSize = as.numeric(table(naive_ch$cellchat_data@idents))
# Plots a circos plot to show the number of interactions between cell groups
netVisual_circle(cellchat_data@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
# load package
library(CellChat)
library(NMF)
library(ggalluvial)
library(Seurat)
# Plots a circos plot to show the number of interactions between cell groups
netVisual_circle(cellchat_data@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
#####################################################
#Visualize each condition #####
####################################################
#1- naive
cell_chate_naive = naive_ch$cellchat_data_object
groupSize = as.numeric(table(cell_chate_naive@idents))
# Plots a circos plot to show the number of interactions between cell groups
netVisual_circle(cell_chate_naive@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
# Plots a circos plot to show the number of interactions between cell groups
naive_network<-netVisual_circle(cell_chate_naive@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
#create file ####
dir.create("cell_chat", recursive = T)
png("cell_cht/naive_network.png", res = 300, height = 300*6, width = 300*6)
png("cell_chat/naive_network.png", res = 300, height = 300*6, width = 300*6)
naive_network
dev.off()
naive_network2<-netVisual_circle(cellchat_data@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
# Plots a circos plot to show the strength of interactions between cell groups
naive_network2<-netVisual_circle(cell_chate_naive@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
png("cell_chat/naive_network_weight.png", res = 300, height = 300*6, width = 300*6)
naive_network2
dev.off()
# full plot
mat = cell_chate_naive@net$weight
par(mfrow = c(2,6), xpd=TRUE, mar = c(0.75,0.75,0.75,0.75))
for (i in 1:nrow(mat)) {
mat2 = matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
mat2[i, ] = mat[i, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])
}
par(mfrow=c(1,1))
naive_network3=par(mfrow=c(1,1))
png("cell_chat/naive_network_seperated.png", res = 300, height = 300*6, width = 300*12)
naive_network3
dev.off()
naive_network3=par(mfrow=c(1,1))
png("cell_chat/naive_network_seperated.png", res = 300, height = 300*6, width = 300*12)
naive_network3
dev.off()
png("cell_chat/naive_network_seperated.png", res = 300, height = 300*6, width = 300*12)
mat = cell_chate_naive@net$weight
par(mfrow = c(2,6), xpd=TRUE, mar = c(0.75,0.75,0.75,0.75))
for (i in 1:nrow(mat)) {
mat2 = matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
mat2[i, ] = mat[i, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])
}
naive_network3=par(mfrow=c(1,1))
dev.off()
#1- treated
cell_chate_treated = treated_ch$cellchat_data_object
groupSize = as.numeric(table(cell_chate_treated@idents))
# Plots a circos plot to show the number of interactions between cell groups
treated_network<-netVisual_circle(cell_chate_treated@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
png("cell_chat/treated_network.png", res = 300, height = 300*6, width = 300*6)
png("cell_chat/treated_network.png", res = 300, height = 300*6, width = 300*6)
treated_network
dev.off()
treated_network2<-netVisual_circle(cell_chate_treated@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
png("cell_chat/treated_network_weight.png", res = 300, height = 300*6, width = 300*6)
treated_network2
dev.off()
treated_network2
png("cell_chat/treated_network_seperated.png", res = 300, height = 300*6, width = 300*12)
mat = cell_chate_treated@net$weight
par(mfrow = c(2,6), xpd=TRUE, mar = c(0.75,0.75,0.75,0.75))
for (i in 1:nrow(mat)) {
mat2 = matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
mat2[i, ] = mat[i, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])
}
treated_network3=par(mfrow=c(1,1))
dev.off()
# make a heatmap of interactions
netVisual_heatmap(cell_chate_naive)
netVisual_heatmap(cell_chate_naive, measure = "weight")
?netVisual_heatmap
View(cell_chate_naive)
p=netVisual_heatmap(cell_chate_naive, measure = "weight")
View(p)
p=netVisual_heatmap(cell_chate_naive, measure = "weight")
png("cell_chat/naive_network_weight.png", res = 300, height = 300*10, width = 300*10)
p
dev.off()
png("cell_chat/naive_network_weight.png", res = 300, height = 300*6, width = 300*6)
p
dev.off()
# Plots a circos plot to show the strength of interactions between cell groups
naive_network2<-netVisual_circle(cell_chate_naive@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
png("cell_chat/naive_network_weight.png", res = 300, height = 300*6, width = 300*6)
naive_network2
dev.off()
p=netVisual_heatmap(cell_chate_naive, measure = "weight")
png("cell_chat/naive_hm.png", res = 300, height = 300*6, width = 300*6)
p
dev.off()
treated_heatmap=netVisual_heatmap(cell_chate_treated, measure = "weight")
png("cell_chat/treated_hm.png", res = 300, height = 300*6, width = 300*6)
p
dev.off()
png("cell_chat/treated_hm.png", res = 300, height = 300*6, width = 300*6)
treated_heatmap
dev.off()
# Plots a circos plot to show the number of interactions between cell groups
naive_network<-netVisual_circle(cell_chate_naive@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
png("cell_chat/naive_network.png", res = 300, height = 300*6, width = 300*6)
naive_network
dev.off()
# Plots a circos plot to show the strength of interactions between cell groups
naive_network2<-netVisual_circle(cell_chate_naive@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
png("cell_chat/naive_network_weight.png", res = 300, height = 300*6, width = 300*6)
naive_network2
dev.off()
# see all the pathways
cellchat_data_naive@netP$pathways
# see all the pathways
cell_chate_naive@netP$pathways
# What pathway to look at
pathways.show = c("MHC-I")
# Circos plot
netVisual_aggregate(cell_chate_naive, signaling = pathways.show, layout = "circle")
# What pathway to look at
pathways.show = c("CXCL")
# Circos plot
netVisual_aggregate(cell_chate_naive, signaling = pathways.show, layout = "circle")
# What pathway to look at
pathways.show = c("MIF")
# Circos plot
netVisual_aggregate(cell_chate_naive, signaling = pathways.show, layout = "circle")
# Chord diagram
netVisual_aggregate(cell_chate_naive, signaling = pathways.show, layout = "chord")
# Heatmap
netVisual_heatmap(cell_chate_naive, signaling = pathways.show, color.heatmap = "Reds")
# which pairs drive it
netAnalysis_contribution(cell_chate_naive, signaling = pathways.show)
# Heatmap
netVisual_heatmap(cell_chate_naive, signaling = pathways.show, color.heatmap = "Reds")
# which pairs drive it
netAnalysis_contribution(cell_chate_naive, signaling = pathways.show)
# which pairs drive it
netAnalysis_contribution(cell_chate_naive, signaling = pathways.show)
# expression violin
plotGeneExpression(cell_chate_naive, signaling = pathways.show, enriched.only = TRUE, type = "violin")
#-----------------------------------------
#which pathways got activated /canceled by chemo-----
#--------------------------------------
naive <- cell_chate_naive@netP$pathways
treated <- cell_chate_treated@netP$pathways
diff_path <- naive-treated
naive
treated
diff_path <- setdiff(naive, treated)
diff_path
diff_path <- setdiff(treated, naive)
diff_path
save.image("D:/PDAC_SCRNA/Sessions/cellchat_2.RData")
treated$cell_major
#------------------------------------
#differental analysis of the interaction------
#-------------------------------------
# Create a list with the CellChat objects we want to compare
cellchat.list = list(Control = cell_chate_naive, Treatement = cell_chate_treated)
# Create a merged cellchat object that will contain both conditions
merged_cellchat = mergeCellChat(cellchat.list, add.names = names(cellchat.list))
# number of differential interactions
gg1 = compareInteractions(merged_cellchat, show.legend = F, group = c(1,2))
gg2 = compareInteractions(merged_cellchat, show.legend = F, group = c(1,2), measure = "weight")
gg1 + gg2
png("cell_chat/differential interactions.png", res = 300, height = 300*6, width = 300*6)
gg1 + gg2
dev.off()
# Plot differential interaction circos plots
netVisual_diffInteraction(merged_cellchat , weight.scale = T)
netVisual_diffInteraction(merged_cellchat , weight.scale = T, measure = "weight")
png("cell_chat/differential interactions_circus.png", res = 300, height = 300*6, width = 300*6)
netVisual_diffInteraction(merged_cellchat , weight.scale = T, measure = "weight")
dev.off()
# Plot differential interaction heatmaps
g1 = netVisual_heatmap(merged_cellchat)
g2 = netVisual_heatmap(merged_cellchat , measure = "weight")
png("cell_chat/differential interactions_hm.png", res = 300, height = 300*6, width = 300*6)
g1 + g2
dev.off()
png("cell_chat/differential interactions_in_out.png", res = 300, height = 300*6, width = 300*6)
num.link = sapply(cellchat.list, function(x) {rowSums(x@net$count) + colSums(x@net$count)-diag(x@net$count)})
weight.MinMax = c(min(num.link), max(num.link)) # control the dot size in the different datasets
gg = list()
for (i in 1:length(cellchat.list)) {
gg[[i]] = netAnalysis_signalingRole_scatter(cellchat.list[[i]], title = names(cellchat.list)[i], weight.MinMax = weight.MinMax)
}
patchwork::wrap_plots(plots = gg)
dev.off()
# plot the ranks by pathway
rankNet(merged_cellchat, mode = "comparison", measure = "weight", sources.use = NULL, targets.use = NULL, stacked = F, do.stat = TRUE)
png("cell_chat/differential interactions_pathway.png", res = 300, height = 300*6, width = 300*6)
rankNet(merged_cellchat, mode = "comparison", measure = "weight", sources.use = NULL, targets.use = NULL, stacked = F, do.stat = TRUE)
dev.off()
# Differential
netVisual_bubble(merged_cellchat, sources.use = "B", targets.use = c(1:12),  comparison = c(1, 2), angle.x = 45)
# Differential
png("cell_chat/differential interactions_diff.png", res = 300, height = 300*6, width = 300*6)
netVisual_bubble(merged_cellchat, sources.use = "B", targets.use = c(1:12),  comparison = c(1, 2), angle.x = 45)
dev.off()
# Violin
merged_cellchat@meta$datasets = factor(merged_cellchat@meta$datasets, levels = c("Control", "Treatment")) # set factor level
plotGeneExpression(merged_cellchat, signaling = "CXCL", split.by = "datasets", colors.ggplot = T, type = "violin")
# Differential
png("cell_chat/differential interactions_diff.png", res = 300, height = 300*6, width = 300*6)
netVisual_bubble(merged_cellchat, sources.use = "CAF", targets.use = c(1:7),  comparison = c(1, 2), angle.x = 45)
dev.off()
?netVisual_bubble
png("cell_chat/differential interactions_diff.png", res = 300, height = 300*10, width = 300*6)
netVisual_bubble(merged_cellchat, sources.use = "CAF", targets.use = c(1:5),  comparison = c(1, 2), angle.x = 45)
dev.off()
png("cell_chat/differential interactions_diff_lymphoid.png", res = 300, height = 300*10, width = 300*6)
netVisual_bubble(merged_cellchat, sources.use = "Lymphoid", targets.use = c(1:5),  comparison = c(1, 2), angle.x = 45)
dev.off()
x <- subsetCommunication(cc_naive)
x <- subsetCommunication(cell_chate_naive)
y <- subsetCommunication(cell_chate_treated)
f <- function(d, src, tgt, lr) subset(d, source==src & target==tgt & interaction_name_2==lr)$prob
c_na <- f(x,"CAF","Myeloid","CXCL12 - CXCR4")
c_tx <- f(y,"CAF","Myeloid","CXCL12 - CXCR4")
delta <- c_tx - c_na; delta
# Violin
merged_cellchat@meta$datasets = factor(merged_cellchat@meta$datasets, levels = c("Control", "Treatment")) # set factor level
plotGeneExpression(merged_cellchat, signaling = "FGF", split.by = "datasets", colors.ggplot = T, type = "violin")
do_cell_chat <- function(object, group, assay = "RNA", min_cells = 10) {
stopifnot(group %in% colnames(object@meta.data))
# load DB
if (!exists("CellChatDB.human")) data(CellChatDB.human, package = "CellChat")
cellchat_DB <- subsetDB(CellChatDB.human, search = "Secreted Signaling")  # or "ECM-Receptor"/"Cell-Cell Contact"
# build CellChat from Seurat
cellchat <- createCellChat(object = object, group.by = group, assay = assay)
cellchat@DB <- cellchat_DB
cellchat <- subsetData(cellchat)
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
cellchat <- computeCommunProb(cellchat, type = "triMean", population.size = TRUE)
cellchat <- filterCommunication(cellchat, min.cells = min_cells)
cellchat <- computeCommunProbPathway(cellchat)
Interactions <- subsetCommunication(cellchat)
cellchat <- aggregateNet(cellchat)
cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = "netP")
list(cellchat_data_object = cellchat, interaction = Interactions)
}
# plot the sending and recieving scores
netAnalysis_signalingRole_heatmap(cellchat_data, pattern = "outgoing")
# plot the sending and recieving scores
netAnalysis_signalingRole_heatmap(cell_chate_treated, pattern = "outgoing")
netAnalysis_signalingRole_heatmap(cell_chate_treated, pattern = "incoming")
png("cell_chat/treated_system_level.png", res = 300, height = 300*10, width = 300*6)
netAnalysis_signalingRole_heatmap(cell_chate_treated, pattern = "outgoing")
netAnalysis_signalingRole_heatmap(cell_chate_treated, pattern = "incoming")
dev.off()
png("cell_chat/treated_system_level.png", res = 300, height = 300*5, width = 300*10)
netAnalysis_signalingRole_heatmap(cell_chate_treated, pattern = "outgoing")
netAnalysis_signalingRole_heatmap(cell_chate_treated, pattern = "incoming")
dev.off()
p=netAnalysis_signalingRole_heatmap(cell_chate_treated, pattern = "outgoing")
p1=netAnalysis_signalingRole_heatmap(cell_chate_treated, pattern = "incoming")
png("cell_chat/treated_system_level.png", res = 300, height = 300*5, width = 300*10)
p+p1
dev.off()
# who is the biggest talker globally
netAnalysis_signalingRole_scatter(cell_chate_treated)
# who is the biggest talker for particular pathways
netAnalysis_signalingRole_scatter(cell_chate_treated, signaling = c("OSM"))
## identify suitable number of patterns
selectK(cellchat_data, pattern = "outgoing")
nPatterns = 3
## identify suitable number of patterns
selectK(cell_chate_treated, pattern = "outgoing")
nPatterns = 3
cell_chate_treated = identifyCommunicationPatterns(cell_chate_treated, pattern = "outgoing", k = nPatterns)
# Plot
netAnalysis_river(cell_chate_treated, pattern = "outgoing")
netAnalysis_dot(cell_chate_treated, pattern = "outgoing")
class(cell_chate_treated)
# identify enriched pairs in osm
pairLR = extractEnrichedLR(cell_chate_treated, signaling = "OSM", geneLR.return = FALSE)
pairLR
