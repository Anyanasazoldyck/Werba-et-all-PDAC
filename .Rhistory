pcs_use=1:10
seu <- RunPCA(seu, verbose = FALSE)
ElbowPlot(seu)
pcs_use=1:10
# ---- chose PC "Squid Stat" ----
ElbowPlot(seu)
View(seu)
View(seu@meta.data)
seu < RunUMAP(seu, spread = 8, min.dist = 0.2 , reduction.name = "umap")
seu < RunUMAP(seu, spread = 8, min.dist = 0.2 , reduction.name = "umap", dims = pcs_use)
seu <- NormalizeData(seu, verbose = FALSE)
seu <- FindVariableFeatures(seu, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
seu <- ScaleData(seu, verbose = FALSE)
seu <- RunPCA(seu, verbose = FALSE)
ElbowPlot(seu)
pcs_use=1:10
# ---- chose PC "Squid Stat" ----
ElbowPlot(seu)
#find seurat clusters
seu <- FindNeighbors(seu, dims = pcs_use, verbose = FALSE)
seu <- FindClusters(seu, resolution = 0.5, verbose = FALSE)
View(seu)
View(seu@meta.data)
seu <- RunUMAP(seu, dims =pcs_use, spread = 8, min.dist = 0.2)
View(seu)
DimPlot(seu, reduction = "umap", pt.size = 0.5)
seu <- FindClusters(seu, resolution = 0.2, verbose = FALSE)
seu <- RunUMAP(seu, dims =pcs_use, spread = 8, min.dist = 0.2)
DimPlot(seu, reduction = "umap", pt.size = 0.5)
# PK
sweep.res <- paramSweep(seu, PCs = pcs_use, sct = F)
sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)
View(sweep.stats)
best.pk <- as.numeric(find.pK(sweep.stats))
best.pk <- find.pK(sweep.stats)
best.pk
best.pk <- find.pK(sweep.stats)
View(best.pk)
?find.pK
library(ggplot2)
ggplot(best.pk, aes(x = as.numeric(as.character(pK)),
y = BCmetric)) +
geom_point() + geom_line() +
xlab("pK (neighborhood size)") +
ylab("BCmetric (bimodality)") +
theme_minimal()
ggplot(best.pk, aes(x = as.numeric(as.character(pK)),
y = BCmetric)) +
geom_point() +
xlab("pK") +
ylab("BCmetric") +
theme_minimal()
sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)
View(sweep.stats)
best.pk <- find.pK(sweep.stats, )
best.pk <- find.pK(sweep.stats )
best.pk <- find.pK(sweep.stats )
best.pk
View(best.pk)
best.pk <- find.pK(sweep.stats )
ggplot2::ggplot(best.pk, aes(x=pk, y=BCmetric))+
geom_point()+geom_line()
ggplot2::ggplot(best.pk, aes(x=pK, y=BCmetric))+
geom_point()+geom_line()
my_best_pk= best.pk$pK[which.max(best.pk$BCmetric)]
my_best_pk
best.pK <- as.numeric(as.character(best.pK))
my_best_pk <- as.numeric(as.character(my_best_pk))
View(best.pk)
best.pk <- find.pK(sweep.stats )
ggplot(best.pk, aes(x=pK, y=BCmetric))+
geom_line()
ggplot(best.pk, aes(x=pK, y=BCmetric))+
geom_point()+
geom_line()
my_best_pk= 0.15
#estimate the multiplate rate
length(colnames(seu))
View(seu)
meow= objectsseurat_list_no_liver$P03
length(colnames(meow))
rm(meow)
multiplet_rates_10x <- data.frame( 'Multiplet_rate'= c(0.004, 0.008, 0.0160, 0.023, 0.031, 0.039, 0.046, 0.054, 0.061, 0.069, 0.076),
'Loaded_cells' = c(800, 1600, 3200, 4800, 6400, 8000, 9600, 11200, 12800, 14400, 16000),
'Recovered_cells' = c(500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000) )
multiplet_rate <- multiplet_rates_10x %>% dplyr::filter(Recovered_cells < nrow(seu@meta.data)) %>%
dplyr::slice(which.max(Recovered_cells)) %>%
dplyr::select(Multiplet_rate) %>%
as.numeric(as.character())
multiplet_rate=
library(dplyr)
multiplet_rates_10x <- data.frame( 'Multiplet_rate'= c(0.004, 0.008, 0.0160, 0.023, 0.031, 0.039, 0.046, 0.054, 0.061, 0.069, 0.076),
'Loaded_cells' = c(800, 1600, 3200, 4800, 6400, 8000, 9600, 11200, 12800, 14400, 16000),
'Recovered_cells' = c(500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000) )
multiplet_rate <- multiplet_rates_10x %>% dplyr::filter(Recovered_cells < nrow(seu@meta.data)) %>%
dplyr::slice(which.max(Recovered_cells)) %>%
dplyr::select(Multiplet_rate) %>%
as.numeric(as.character())
#estimate the multiplate rate
length(colnames(seu))
multiplet_rate= 0.08
nExp.poi <- round(multiplet_rate * nrow(seu@meta.data)) # multiply by number of cells to get the number of expected multiplets
# ---- Homotypic adjustment ----
annotations <- seu@meta.data$seurat_clusters
homotypic.prop <- modelHomotypic(annotations)
nExp.adj <- round(nExp.poi * (1 - homotypic.prop)) # expected number of doublets
seu <- DoubletFinder::doubletFinder(
seu = seu,
PCs = pcs_use,
pN = 0.25,
pK = my_best_pk,
nExp = nExp.adj,
sct = FALSE
)
View(seu)
View(seu@meta.data)
meta_unfiltered = seu@meta.data
seu <- subset(seu, cells = colnames(seu)[seu@meta.data[["DF.classifications_0.25_0.15_1145"]] == "Singlet"])
View(seu)
View(seu@meta.data)
#------------post integration processing -------------
all_samples_integrated <- readRDS("D:/PDAC_SCRNA/objects/all_samples_integrated.rds")
library(ggplot2)
library(Seurat)
library(readxl)
library(stringr)
#find markers for each cluster
DefaultAssay(all_samples_integrated) <- "RNA"
DefaultAssay(all_samples_integrated) <- "integrated"
all_samples_integrated <- ScaleData(all_samples_integrated)
all_samples_integrated <- RunPCA(all_samples_integrated)
all_samples_integrated <- FindNeighbors(all_samples_integrated, dims = 1:5)
all_samples_integrated <- FindClusters(all_samples_integrated, resolution = 0.5)
p1= DimPlot(all_samples_integrated, reduction = "umap",group.by = "integrated_snn_res.0.5")
all_samples_integrated <- RunUMAP(all_samples_integrated, dims = 1:5)
p1= DimPlot(all_samples_integrated, reduction = "umap",group.by = "integrated_snn_res.0.5")
p1
all_samples_integrated <- FindClusters(all_samples_integrated, resolution = 0.3)
all_samples_integrated <- FindClusters(all_samples_integrated, resolution = 0.2)
all_samples_integrated <- RunUMAP(all_samples_integrated, dims = 1:5)
p1= DimPlot(all_samples_integrated, reduction = "umap",group.by = "integrated_snn_res.0.5")
p1
p1= DimPlot(all_samples_integrated, reduction = "umap",group.by = "integrated_snn_res.0.2")
p1
p1= DimPlot(all_samples_integrated, reduction = "umap",group.by = "integrated_snn_res.0.2")
p2= DimPlot(all_samples_integrated, reduction = "umap", group.by = "orig.ident")
png("plots/integrated_umap_res_02.png", res = 300, width = 300*10, height = 300*5)
p1+p2
dev.off()
png("plots/integrated_umap_Treatment.png", res = 300, width = 300*5, height = 300*5)
DimPlot(all_samples_integrated, reduction = "umap",group.by = "Treatment")
dev.off()
#find markers for each cluster
DefaultAssay(all_samples_integrated) <- "RNA"
markers <- FindAllMarkers(all_samples_integrated,only.pos = T)
View(all_samples_integrated)
?JoinLayers
all_samples_integrated <- JoinLayers(all_samples_integrated, assay = "RNA")
markers <- FindAllMarkers(all_samples_integrated,only.pos = T)
saveRDS(all_samples_integrated,"all_samples_integrated_dim_reduction.rds")
dir.create("csv", recursive = T)
write.csv(markers,"csv/cluster_markers.csv")
#filter markers
markers.sig <- markers[,"p_val_adj"<0.05 & "avg_log2FC">1]
topn=markers %>% dplyr::group_by(cluster) %>%
dplyr::arrange(desc(avg_log2FC), .by_group = T) %>% dplyr::slice_head(n=5)
topn
View(all_samples_integrated)
p=DoHeatmap(all_samples_integrated, features = topn$gene)
png("plots/heatmap.png", res = 300, width = 300*8, height = 300*8)
p
pdev.off()
dev.off()
#make a complex hm
?FetchData
hm_mtx <- FetchData(all_samples_integrated,vars = c(topn$gene, seurat_clusters) )
hm_mtx <- FetchData(all_samples_integrated,vars = c(topn$gene, "seurat_clusters") )
meta <- all_samples_integrated@meta.data
head(meta)
?merge
hm_mtx <- merge(x=hm_mtx,y=meta, by= intersect(rownames(hm_mtx), rownames(meta)))
hm_mtx <- merge(x=hm_mtx,y=meta, by= rownames(hm_mtx), rownames(meta))
hm_mtx <- merge(x=hm_mtx,y=meta, by.x= 0, by.y=0)
library(tidyr)
genes <- unique(topn$gene)
# 1) Fetch expression for genes + cluster + cell IDs
df <- FetchData(all_samples_integrated, vars = genes)
df$seurat_clusters <- Idents(all_samples_integrated)
df$cell <- colnames(all_samples_integrated)
# 2) Long format: one row per (cell, gene)
df_long <- df %>%
pivot_longer(
cols = all_of(genes),
names_to = "gene",
values_to = "expr"
)
# 3) Average per cluster × gene, then to wide matrix
avg <- df_long %>%
group_by(seurat_clusters, gene) %>%
summarise(expr = mean(expr, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = seurat_clusters, values_from = expr) %>%
data.frame(row.names = .$gene) %>% select(-gene)
# 3) Average per cluster × gene, then to wide matrix
avg <- df_long %>%
group_by(seurat_clusters, gene) %>%
summarise(expr = mean(expr, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = seurat_clusters, values_from = expr) %>%
data.frame(row.names = .$gene) %>% dplyr:: select(-gene)
# 3) Average per cluster × gene, then to wide matrix
avg <- df_long %>%
group_by(seurat_clusters, gene) %>%
dplyr::summarise(expr = mean(expr, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = seurat_clusters, values_from = expr) %>%
data.frame(row.names = .$gene) %>% dplyr:: select(-gene)
# 3) Average per cluster × gene, then to wide matrix
avg <- df_long %>%
dplyr::group_by(seurat_clusters, gene) %>%
dplyr::summarise(expr = mean(expr, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = seurat_clusters, values_from = expr) %>%
data.frame(row.names = .$gene) %>% dplyr:: select(-gene)
# 4) Scale rows and plot
mat <- t(scale(t(as.matrix(avg))))
mat[is.na(mat)] <- 0
row_split <- topn %>%
distinct(gene, cluster) %>%
right_join(tibble(gene = rownames(mat)), by = "gene") %>%
pull(cluster)
Heatmap(mat, name = "Z-score", row_split = row_split,
cluster_rows = TRUE, cluster_columns = TRUE,
show_row_names = TRUE, show_column_names = TRUE)
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
Heatmap(mat, name = "Z-score", row_split = row_split,
cluster_rows = TRUE, cluster_columns = TRUE,
show_row_names = TRUE, show_column_names = TRUE)
Heatmap(mat, name = "Z-score",
cluster_rows = TRUE, cluster_columns = TRUE,
show_row_names = TRUE, show_column_names = TRUE)
p=Heatmap(mat, name = "Z-score",
cluster_rows = F, cluster_columns = TRUE,
show_row_names = TRUE, show_column_names = TRUE)
p=Heatmap(mat, name = "Z-score",
cluster_rows = F, cluster_columns = TRUE,
show_row_names = TRUE, show_column_names = TRUE)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*8)
p
dev.off()
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*8)
p
dev.off()
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
?RColorBrewer
display.brewer.pal(n, name)
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,
colorblindFriendly=T)
RColorBrewer::display.brewer.all(colorblindFriendly = T)
hm_palette = RColorBrewer::brewer.pal("RdYIBu", n=11)
hm_palette = RColorBrewer::brewer.pal(name="RdYlBu", n=11)
hm_palette
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = hm_palette)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
setwd("D:\\PDAC_SCRNA")
library(ggplot2)
library(Seurat)
library(readxl)
library(stringr)
all_samples_integrated <- readRDS("D:/PDAC_SCRNA/all_samples_integrated_dim_reduction.rds")
cluster_markers <- read.csv("csv/cluster_markers.csv",sep = " ",header = T)
View(cluster_markers)
markers <- read.csv("csv/cluster_markers.csv",sep = "",header = T)
View(markers)
> markers <- read_csv("csv/cluster_markers.csv"T)
markers <- read.csv("csv/cluster_markers.csv")
View(cluster_markers)
View(cluster_markers)
#filter markers
markers.sig <- markers[,"p_val_adj"<0.05 & "avg_log2FC">1]
genes <- unique(topn$gene)
#make a complex hm
library(tidyr)
topn=markers %>% dplyr::group_by(cluster) %>%
dplyr::arrange(desc(avg_log2FC), .by_group = T) %>% dplyr::slice_head(n=5)
genes <- unique(topn$gene)
# 1) Fetch expression for genes + cluster + cell IDs
df <- FetchData(all_samples_integrated, vars = genes)
df$seurat_clusters <- Idents(all_samples_integrated)
df$cell <- colnames(all_samples_integrated)
library(ggplot2)
library(Seurat)
library(readxl)
library(stringr)
df <- AverageExpression(all_samples_integrated,features = genes, group.by = seurat_clusters)
df <- AverageExpression(all_samples_integrated,features = genes, group.by = "seurat_clusters")
View(df)
head(df[["RNA"]])
# 1) Fetch expression for genes + cluster + cell IDs
df <- FetchData(all_samples_integrated, vars = genes)
# 1) Fetch expression for genes + cluster + cell IDs
df <- FetchData(all_samples_integrated, vars = genes)
df$cluster <- Idents(all_samples_integrated)
df$ cell <-colnames(all_samples_integrated)
colnames(df)
head(df)
df$ cell <-colnames(df)
# 1) Fetch expression for genes + cluster + cell IDs
df <- FetchData(all_samples_integrated, vars = genes)
df$cluster <- Idents(all_samples_integrated)
df$ cell <-colnames(df)
df$ cell <-rownames(df)
head(df,1:5)
head(df)
?pivot_longer
#make a complex hm
library(dplyr)
hm_mtx<- df %<%  group_by(df$cluster)
hm_mtx<- df %>%  group_by(df$cluster)
hm_mtx<- df %>%  group_by(df$cluster) %>% summarise(mean_expression=mean(genes))
df_longer<- pivot_longer(cols = "cluster",values_to = "gene")
library(tidyr)
df_longer<- pivot_longer(cols = "cluster",values_to = "gene")
df_longer<- pivot_longer(df,cols = "cluster",values_to = "gene")
View(df)
View(df_longer)
df_longer<- pivot_longer(df,cols = "cluster")
View(df_longer)
?pivot_wider
df_longer<- pivot_longer(cols = "cluster",names_to = genes, values_to = "expression")
df_longer<- pivot_longer(df,cols = "cluster",names_to = genes, values_to = "expression")
df_longer<- pivot_longer(df,cols = "cluster",names_to = "genes", values_to = "expression")
View(df_longer)
df_longer<- pivot_longer(df,cols = "cluster",names_to = "genes", values_to = "expression")
df$cluster <- Idents(all_samples_integrated)
df$ cell <-rownames(df)
colnames(df)
df_longer<- pivot_longer(df,cols = cluster,names_to = "genes", values_to = "expression")
# 1) Fetch expression for genes + cluster + cell IDs
df <- FetchData(all_samples_integrated, vars = genes)
df$cluster <- Idents(all_samples_integrated)
df_longer<- pivot_longer(df,cols = cluster,names_to = "genes", values_to = "expression")
head(df)
df_longer<- pivot_longer(df,cols = !cluster,names_to = "genes", values_to = "expression")
head(df_longer)
df_longer %<% group_by(cluster) %<% summarise(mean_expression =mean(expression))
df_longer %>% group_by(cluster) %>% summarise(mean_expression =mean(expression))
df_longer<- pivot_longer(df,cols = !cluster,names_to = "genes", values_to = "expression")
df_longer %>% group_by(c(cluster,genes)) %>% summarise(mean_expression =mean(expression),.groups = "keep")
df_longer %>% group_by(c("cluster","genes")) %>% summarise(mean_expression =mean(expression),.groups = "keep")
df_longer %>% group_by(cluster) %>% summarise(mean_expression =mean(expression),.groups = "keep")
?summarise
df_longer %>% group_by(cluster) %>% summarise(genes,mean_expression =mean(expression),.groups = "keep")
df_longer %>% group_by(cluster) %>% summarise(.by=genes,mean_expression =mean(expression),.groups = "keep")
df_longer %>% group_by(cluster) %>% summarise(.by=genes,mean_expression =mean(expression),.groups = "drop")
df_longer %>% group_by(cluster,genes) %>% summarise(mean_expression =mean(expression),.groups = "drop")
df_longer %>% group_by(cluster,genes) %>% summarise(mean_expression =mean(expression),.groups = "drop")
df_longer<-df_longer %>% group_by(cluster,genes) %>% summarise(mean_expression =mean(expression),.groups = "drop")
hm_mtx <- pivot_wider(df_longer,names_from = cluster, values_from = mean_expression)
View(hm_mtx)
rownames(hm_mtx)<-hm_mtx$genes
hm_mtx <- as.data.frame(pivot_wider(df_longer,names_from = cluster, values_from = mean_expression))
rownames(hm_mtx)<-hm_mtx$genes
hm_mtx$genes<-NULL
hm_mtx<-as.matrix(hm_mtx)
RColorBrewer::display.brewer.all(colorblindFriendly = T)
hm_palette = RColorBrewer::brewer.pal(name="RdYlBu", n=11)
library(ComplexHeatmap)
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = hm_palette)
mat<-as.matrix(hm_mtx)
RColorBrewer::display.brewer.all(colorblindFriendly = T)
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = hm_palette)
?RColorBrewer
cols <- colorRampPalette(brewer.pal(9, "RdYlBu"))(100)
library(RColorBrewer)
cols <- colorRampPalette(brewer.pal(9, "RdYlBu"))(100)
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
avg <- AverageExpression(all_samples_integrated,
features = genes,
group.by = "seurat_clusters",
assays = "RNA", slot = "data")$RNA
avg <- AverageExpression(all_samples_integrated,
features = genes,
group.by = "seurat_clusters",
assays = "RNA", slot = "data")
mat <- as.matrix(avg)
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
avg <- AverageExpression(all_samples_integrated,
features = genes,
group.by = "seurat_clusters",
assays = "RNA", slot = "data")
mat <- as.matrix(avg)
cols <- colorRampPalette(brewer.pal(9, "RdYlBu"))(100)
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
p
View(mat)
avg <- AverageExpression(all_samples_integrated,
features = genes,
group.by = "seurat_clusters",
assays = "RNA", slot = "data")$RNA
View(avg)
mat <- as.matrix(avg)
View(avg)
View(mat)
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
p=Heatmap(mat, name = "Z-score",
cluster_rows = F, cluster_columns = T,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
df <- FetchData(all_samples_integrated, vars = genes)
df$cluster <- Idents(all_samples_integrated)[rownames(df)]
head(df)
df_longer<- pivot_longer(df,cols = !cluster,names_to = "genes", values_to = "expression")
df_longer<-df_longer %>% group_by(cluster,genes) %>% summarise(mean_expression =mean(expression),.groups = "drop")
hm_mtx <- as.data.frame(pivot_wider(df_longer,names_from = cluster, values_from = mean_expression))
mat <- t(scale(t(as.matrix(hm_mtx))))
df_longer<- pivot_longer(df,cols = !cluster,names_to = "genes", values_to = "expression")
df_longer<-df_longer %>% group_by(cluster,genes) %>% summarise(mean_expression =mean(expression),.groups = "drop")
hm_mtx <- as.data.frame(pivot_wider(df_longer,names_from = cluster, values_from = mean_expression))
rownames(hm_mtx)<-hm_mtx$genes
hm_mtx$genes<-NULL
hm_mtx
mat <- t(scale(t(as.matrix(hm_mtx))))
mat
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
all_samples_integrated=DefaultAssay(all_samples_integrated,"RNA")
DefaultAssay(all_samples_integrated) <- "RNA"
df <- FetchData(all_samples_integrated, vars = genes)
df$cluster <- Idents(all_samples_integrated)[rownames(df)]
colnames(df)
View(all_samples_integrated)
df <- FetchData(all_samples_integrated, vars = genes,layer = "data")
df$cluster <- Idents(all_samples_integrated)[rownames(df)]
colnames(df)
df <- FetchData(all_samples_integrated, vars = genes,layer = "count")
df$cluster <- Idents(all_samples_integrated)[rownames(df)]
colnames(df)
DefaultAssay(all_samples_integrated) <- "integrated"
topn=markers %>% dplyr::group_by(cluster) %>%
dplyr::arrange(p_val_adj, .by_group = T) %>% dplyr::slice_head(n=5)
topn
?topn
topn$gene
topn=markers %>% dplyr::group_by(cluster) %>%
dplyr::arrange(p_val_adj, .by_group = T) %>% dplyr::slice_head(n=5)
p=DoHeatmap(all_samples_integrated, features = topn$gene)
png("plots/heatmap.png", res = 300, width = 300*8, height = 300*8)
p
dev.off()
#make a complex hm
genes <- unique(topn$gene)
all_samples_integrated=DefaultAssay(all_samples_integrated,"RNA")
#make a complex hm
DefaultAssay(all_samples_integrated)<-"RNA"
genes <- unique(topn$gene)
df <- FetchData(all_samples_integrated, vars = genes)
df$cluster <- Idents(all_samples_integrated)[rownames(df)]
colnames(df)
head(df)
df_longer<- pivot_longer(df,cols = !cluster,names_to = "genes", values_to = "expression")
df_longer<-df_longer %>% group_by(cluster,genes) %>% summarise(mean_expression =mean(expression),.groups = "drop")
hm_mtx <- as.data.frame(pivot_wider(df_longer,names_from = cluster, values_from = mean_expression))
rownames(hm_mtx)<-hm_mtx$genes
hm_mtx$genes<-NULL
mat <- t(scale(t(as.matrix(hm_mtx))))
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
write.csv(topn,"csv/top_cluster_markers.csv")
?colorRampPalette
#define color pal
cols = colorRampPalette(brewer.pal(9, "RdYlBu"),bias=100)
View(cols)
#define color pal
cols = colorRampPalette(brewer.pal(9, "RdYlBu"))(100)
