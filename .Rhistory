#gene1
gene_table = em_symbols[gene1,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
names(gene_table)= c("expression","group")
TNF_box_plot = ggplot (gene_table, aes(x=group, y=expression, colour = group))+
geom_boxplot()+
scale_color_manual(values = c("pink","orange","skyblue"))
TNF_box_plot
#Task 3. Make a single boxplot including all 10 of the genes of lowest p
candidate_genes= row.names (master)[10]
#Task 3. Make a single boxplot including all 10 of the genes of lowest p
candidate_genes= row.names (master)[1:10]
ene_table = em_symbols[gene1,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
ene_table = em_symbols[candidate_genes,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
gene_table = em_symbols[candidate_genes,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
source("D:/Bioinformatics for wet lab course/Tutorial 1.R")
em = read.csv("D:\\Bioinformatics for wet lab course\\em.csv",header=TRUE,sep="\t",row.names= 1)
annotation =read.csv ("D:\\Bioinformatics for wet lab course\\annotations.csv",header=TRUE,sep="\t",row.names = 1)
de= read.csv("D:\\Bioinformatics for wet lab course\\de_duct_vs_gut.csv",sep='\t',header=TRUE, row.names = 1)
#new_names_for the annonation file
names(annotation)=c("chromosome","start","stop","gene_name","gene_type")
#merging by ID
master_temp= merge(em,annotation,by.x = 0,by.y =0)
master=merge(master_temp,de,by.x = 1,by.y = 0)
#changing index to gene_names
rownames(master)=master[,'gene_name']  #row.names == rownames
#change and arrange
names(master)[1]="ID"
grep("gene_name",colnames(master)) # this grep () function returns index from colname
master= master[,-14] #deleted gene_name
#creating a file that has gene names and expression values for 9 samples
#em_symbols= master[,2:10]
em_symbols = master[ , ss$SAMPLE]
# clean the na
master= na.omit(master)
#sort values based on the p.adj to get the most significantly differentiated genes
sorted_order= order(master[,"p.adj"],decreasing = FALSE) #returns vector of index
master= master[sorted_order,]
#mean
master$mean_expression= rowMeans(master[,2:10])
#-logP
master$mlogP = -log10(master[,"p.adj"])
#pick up the significant
#As.Facor Convert Logical to Factor
master$sig = as.factor(master[,"p.adj"]<0.05 & abs(master[,"log2fold"])>1.0)
master_sig =subset(master, master$sig==TRUE)
sig_genes <- rownames(master_sig)
#Scaling
em_symbols=na.omit(em_symbols)
em_scaled=data.frame( t(scale(t(em_symbols))))
em_scaled=na.omit(em_scaled)
#expression values for the significant genes only.
em_symbols_sig= subset(em_symbols[sig_genes,])
em_scaled_sig = subset (em_scaled[sig_genes,])
#box_plot
gene_table = em_symbols["Tnf",]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
names(gene_table)= c("expression","group")
TNF_box_plot = ggplot (gene_table, aes(x=group, y=expression, colour = group))+
geom_boxplot()+
scale_color_manual(values = c("pink","orange","skyblue"))
TNF_box_plot
#box_plot
gene_table = em_symbols["Tnf",]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
names(gene_table)= c("expression","group")
TNF_box_plot = ggplot (gene_table, aes(x=group, y=expression, colour = group))+
geom_boxplot()+
scale_color_manual(values = c("pink","orange","skyblue"))
TNF_box_plot
library (ggplot2)
library(ggrepel)
library(reshape2)
library(magrittr)
em = read.csv("D:\\Bioinformatics for wet lab course\\em.csv",header=TRUE,sep="\t",row.names= 1)
annotation =read.csv ("D:\\Bioinformatics for wet lab course\\annotations.csv",header=TRUE,sep="\t",row.names = 1)
de= read.csv("D:\\Bioinformatics for wet lab course\\de_duct_vs_gut.csv",sep='\t',header=TRUE, row.names = 1)
#new_names_for the annonation file
names(annotation)=c("chromosome","start","stop","gene_name","gene_type")
#merging by ID
master_temp= merge(em,annotation,by.x = 0,by.y =0)
master=merge(master_temp,de,by.x = 1,by.y = 0)
#changing index to gene_names
rownames(master)=master[,'gene_name']  #row.names == rownames
#change and arrange
names(master)[1]="ID"
grep("gene_name",colnames(master)) # this grep () function returns index from colname
master= master[,-14] #deleted gene_name
#creating a file that has gene names and expression values for 9 samples
#em_symbols= master[,2:10]
em_symbols = master[ , ss$SAMPLE]
# clean the na
master= na.omit(master)
#sort values based on the p.adj to get the most significantly differentiated genes
sorted_order= order(master[,"p.adj"],decreasing = FALSE) #returns vector of index
master= master[sorted_order,]
#mean
master$mean_expression= rowMeans(master[,2:10])
#-logP
master$mlogP = -log10(master[,"p.adj"])
#pick up the significant
#As.Facor Convert Logical to Factor
master$sig = as.factor(master[,"p.adj"]<0.05 & abs(master[,"log2fold"])>1.0)
master_sig =subset(master, master$sig==TRUE)
sig_genes <- rownames(master_sig)
#Scaling
em_symbols=na.omit(em_symbols)
em_scaled=data.frame( t(scale(t(em_symbols))))
em_scaled=na.omit(em_scaled)
#expression values for the significant genes only.
em_symbols_sig= subset(em_symbols[sig_genes,])
em_scaled_sig = subset (em_scaled[sig_genes,])
#SAVE
tables_to_be_saved <- list(
"em_symbols" = em_symbols,
"em_scaled" = em_scaled,
"master" = master,
"master_sig" = master_sig,
"em_symbols_sig" = em_symbols_sig,
"em_scaled_sig" = em_scaled_sig
)
# Save each table with its name
for (name in names(tables_to_be_saved)) {
write.table(
tables_to_be_saved[[name]],
file = paste0("D:/Bioinformatics for wet lab course/", name, ".tsv"),
sep = "\t",
row.names = FALSE  # Include if you want row names
)
}
master_sig_up = subset(master,log2fold >1  &  p.adj<0.05)
master_sig_down =subset(master, log2fold < -1   &  p.adj <0.05)
master_sig_up_top5 = master_sig_up[1:5,]
master_sig_down_top5 = master_sig_down[1:5,]
ggp=ggplot(master,aes(x=log2fold,y=mlogP))+geom_point (aes(colour = "a")) +
geom_point(data=master_sig_up,aes(colour="b")) +
geom_point (data= master_sig_down,aes(colour= "c"))+
labs(title = "Volcano plot", x="log2 fold change", y= "m logP adjusted")+
scale_colour_manual(values = c("black", "red", "blue"),labels=c("nonsignificant","highly expressed","lowered expression"))+
geom_vline(xintercept=-1)+
geom_vline(xintercept = 1)+
geom_hline(yintercept=-log10(0.05))+
xlim(c(-20,20))+
ylim(c(0,100))+
geom_text_repel(data= master_sig_up_top5, aes(label=rownames(master_sig_up_top5)))+
geom_text_repel(data= master_sig_down_top5,aes(label=rownames(master_sig_down_top5)))+
theme_classic()
ggp
png("D:\\Bioinformatics for wet lab course\\volcano.png", width=500,height=500)
print(ggp)
dev.off()
#MA PLOT
ggp2=ggplot(master,aes(x=log10(mean_expression),y=log2fold))+geom_point (aes(colour="a")) +
geom_point(data=master_sig_up,aes(colour="b")) +
geom_point (data= master_sig_down,aes(colour= "c"))+
scale_colour_manual(values=c("black","red","blue"), labels=c("no change", "up","down"))
labs(title = "MA plot", x="log10 mean", y= "fold change")+
geom_text_repel(data= master_sig_up_top5, aes(label=rownames(master_sig_up_top5)))+
geom_text_repel(data= master_sig_down_top5,aes(label=rownames(master_sig_down_top5)))+
theme_classic()
ggp2
png("D:\\Bioinformatics for wet lab course\\ma.png", width=500,height=500)
print(ggp2)
dev.off()
#tutorial 6
#sample
ss= read.table("D:\\bioinformatics for wet lab course\\sample_sheet (1).csv",header=TRUE, sep="\t")
#Factor returns  levels based on a pattern
ss$SAMPLE_GROUP= factor(ss$SAMPLE_GROUP,levels=c("gut","duct","node"))
# PCA_coordinates
numeric_expression_matrix = as.matrix(sapply(em_scaled,as.numeric))
pca = prcomp(t(numeric_expression_matrix))
pca_coordinates= data.frame(pca$x)
#Variance for each PCA
vars = apply (pca$x,2,var)
prop_PC1 = round (vars["PC1"]/sum(vars),4)*100
x_label= paste("PC1",prop_PC1,"%",sep = " ")
x_label
prop_PC2 = round (vars["PC2"]/sum(vars),4)*100
y_label= paste("PC2",prop_PC2,"%",sep = " ")
#PCA plot
pca_plot = ggplot (pca_coordinates, aes( x= PC1,y=PC2)) +
geom_point (aes(colour = ss$SAMPLE_GROUP)) +
scale_color_manual(values=c("pink","skyblue","green"))+
labs(title = "PCA plot", x= x_label, y= y_label)+
geom_text_repel (aes(label= ss$SAMPLE_GROUP))+
theme_classic()
pca_plot
#density plot for
density_plot_gut_1 = ggplot(em,aes(x=log10(gut_r1))) +geom_density()
density_plot_gut_1
em_melt = melt(em)
density_plot = ggplot (em_melt, aes(x=log10(value))) +geom_density()+
facet_wrap(em_melt$variable)
density_plot
#box_plot
gene_table = em_symbols["Tnf",]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
names(gene_table)= c("expression","group")
TNF_box_plot = ggplot (gene_table, aes(x=group, y=expression, colour = group))+
geom_boxplot()+
scale_color_manual(values = c("pink","orange","skyblue"))
TNF_box_plot
#make seperate boxplot for each of the three genes with lowet p value
master_sorted <- master[order(master$p.adj), ]
gene1 = row.names (master)[1]
gene2= row.names(master)[2]
gene3= row.names (master)[3]
#gene1
gene_table = em_symbols[gene1,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
names(gene_table)= c("expression","group")
TNF_box_plot = ggplot (gene_table, aes(x=group, y=expression, colour = group))+
geom_boxplot()+
scale_color_manual(values = c("pink","orange","skyblue"))
#make seperate boxplot for each of the three genes with lowet p value
master_sorted <- master[order(master$p.adj), ]
gene1 = row.names (master)[1]
gene2= row.names(master)[2]
gene3= row.names (master)[3]
#gene1
gene_table = em_symbols[gene1,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
names(gene_table)= c("expression","group")
TNF_box_plot = ggplot (gene_table, aes(x=group, y=expression, colour = group))+
geom_boxplot()+
scale_color_manual(values = c("pink","orange","skyblue"))
TNF_box_plot
#Task 3. Make a single boxplot including all 10 of the genes of lowest p
candidate_genes= row.names (master)[1:10]
gene_table = em_symbols[candidate_genes,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
gene_table_melt = melt(gene_table)
View(gene_table_melt)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= group) +
boxplot()+
facet_wrap(gene_table_melt$variable)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= group) +
geom_boxplot()+
facet_wrap(gene_table_melt$variable)
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)
gg_box_candidate
?id.vars
?melt
gene_table_melt = melt(gene_table,id.vars = group)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)
gg_box_candidate
#Task 3. Make a single boxplot including all 10 of the genes of lowest p
candidate_genes= row.names (master)[1:10]
gene_table = em_symbols_scaled[candidate_genes,]
View(em_symbols_sig)
View(em_scaled_sig)
#Task 3. Make a single boxplot including all 10 of the genes of lowest p
candidate_genes= row.names (master)[1:10]
gene_table = em_scaled[candidate_genes,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
gene_table_melt = melt(gene_table,id.vars = group)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)
gg_box_candidate
#Task 3. Make a single boxplot including all 10 of the genes of lowest p
candidate_genes= row.names (master)[1:10]
gene_table = em_scaled_sig[candidate_genes,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
gene_table_melt = melt(gene_table,id.vars = group)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # must be placed after any other theme
facet_wrap(gene_table_melt$variable)
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+# must be placed after any other theme
facet_wrap(gene_table_melt$variable,col=3)
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable,col=3)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
?melt
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable,col=3)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable,col=3)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable,col=3)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
?melt
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
?melt
source("D:/Bioinformatics for wet lab course/Tutorial 1.R")
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable, ncol=9)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable, ncol=9)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable, ncol=9)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
#Task 3. Make a single boxplot including all 10 of the genes of lowest p
candidate_genes= row.names (master)[1:10]
gene_table = em_scaled[candidate_genes,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
gene_table_melt = melt(gene_table)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), fill= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable, ncol=9)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), fill= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable, ncol=9)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
ggp_candidate = ggplot(gene_data.m, aes(x=variable, y=value, fill = groups)) +
geom_boxplot()
ggp_candidate = ggplot(gene_table_melt, aes(x=variable, y=value, fill = groups)) +
geom_boxplot()
ggp_candidate
ggp_candidate = ggplot(gene_table_melt, aes(x=variable, y=value, fill = group)) +
geom_boxplot()
ggp_candidate
source("D:/Bioinformatics for wet lab course/Tutorial 1.R")
all_samples <- readRDS("D:/Final Project/objects/all_samples.rds")
View(all_samples)
sc_list <- readRDS("D:/Final Project/objects/sc_list.rds")
View(sc_list)
View(sc_list)
sc_list[["y_r"]][["CML_419"]]@meta.data
library(Seurat)
all_samples@meta.data
meta_out= all_samples[[meta.data]]
meta_out= all_samples@meta.data
meta_out$ID= names(meta_out)
View(meta_out)
meta_out$ID= row.names(meta_out)
cell_count_per_sample= sum(unique(meta_out$ID),group.by=meta_out$orig.ident)
cell_count_per_sample <- table(meta_out$orig.ident)
View(cell_count_per_sample)
mean_sequenced_cells = mean(cell_count_per_sample$Freq)
cell_count_per_sample= as.data.frame(cell_count_per_sample)
mean_sequenced_cells = mean(cell_count_per_sample$Freq)
median_sequenced_cells = median(cell_count_per_sample$Freq)
print (min(cell_count_per_sample$Freq))
print (max(cell_count_per_sample$Freq))
#median of 3085 cells were sequenced per sample ()
#minimum 1153
#max is 14054
mean(cell_count_per_sample$Freq)
process_sample <- function(sample) {
# Basic preprocessing
sample <- SCTransform(sample, verbose = FALSE)
sample <- RunPCA(sample, verbose = FALSE)
sample <- RunUMAP(sample, dims = 1:30)
sample <- FindNeighbors(sample, dims = 1:30)
sample <- FindClusters(sample, resolution = 0.2)
#find the perfect p dim
percent_var <- (stdv^2/sum(stdv^2)) * 100
cumulative_var <- cumsum(percent_var)
PC1 <- which(cumulative_var > 90)[1]
PC2 <- which(diff(percent_var) < 0.1)[1] + 1
min_pc <- min(PC1, PC2)
# Run parameter sweep to get best pK
sweep.res <- paramSweep_v3(sample, PCs = 1:min_pc, sct = TRUE)
sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)
best.pK <- as.numeric(as.vector(find.pK(sweep.stats)$pK[which.max(find.pK(sweep.stats)$BCmetric)]))
# Expected doublet rate (rule of thumb: ~1% per 1000 cells)
multiplet_rates_10x <- data.frame(
'Multiplet_rate'= c(0.004, 0.008, 0.0160, 0.023, 0.031, 0.039, 0.046, 0.054, 0.061, 0.069, 0.076),
'Loaded_cells'  = c(800, 1600, 3200, 4800, 6400, 8000, 9600, 11200, 12800, 14400, 16000),
'Recovered_cells' = c(500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000)
)
multiplet_rate <- multiplet_rates_10x %>%
dplyr::filter(Recovered_cells < nrow(seu_sample_subset@meta.data)) %>%
dplyr::slice(which.max(Recovered_cells)) %>%
dplyr::select(Multiplet_rate) %>%
as.numeric(as.character())
# Homotypic adjustment
nExp.poi <- round(multiplet_rate * nrow(sample@meta.data)) # multiply by number of cells to get the number of expected multiplets
nExp.adj <- round(nExp.poi * (1 - homotypic.prop)) # expected number of doublets
# Run DoubletFinder
sample <- doubletFinder_v3(sample,
PCs = 1:min_pc,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = TRUE)
# Keep singlets only
df.col <- grep("DF.classification", colnames(sample@meta.data), value = TRUE)[1]
sample <- subset(sample, cells = rownames(sample@meta.data)[sample@meta.data[[df.col]] == "Singlet"])
return(sample)
}
rm(ls=lst())
rm(ls=list())
rm(list=ls())
gc()
library(infercnv)
library(rjags)
library(infercnv)
###############################################################################################
#------------------identifying malingant epithilal cells using inferCNV-------------------------
###############################################################################################
rm(list=ls())
setwd("D:/PDAC_SCRNA")
#call INFERCNV and rJAGS####
library(infercnv)
library(rjags)
library(Seurat)
library(dplyr)
#split my seurat object into samples
samples_list <- SplitObject(all_samples_integrated_labeled, split.by = "orig.ident") #splitting by sample
