)
# Save each table with its name
for (name in names(tables_to_be_saved)) {
write.table(
tables_to_be_saved[[name]],
file = paste0("D:/Bioinformatics for wet lab course/", name, ".tsv"),
sep = "\t",
row.names = FALSE  # Include if you want row names
)
}
master_sig_up = subset(master,log2fold >1  &  p.adj<0.05)
master_sig_down =subset(master, log2fold < -1   &  p.adj <0.05)
master_sig_up_top5 = master_sig_up[1:5,]
master_sig_down_top5 = master_sig_down[1:5,]
ggp=ggplot(master,aes(x=log2fold,y=mlogP))+geom_point (aes(colour = "a")) +
geom_point(data=master_sig_up,aes(colour="b")) +
geom_point (data= master_sig_down,aes(colour= "c"))+
labs(title = "Volcano plot", x="log2 fold change", y= "m logP adjusted")+
scale_colour_manual(values = c("black", "red", "blue"),labels=c("nonsignificant","highly expressed","lowered expression"))+
geom_vline(xintercept=-1)+
geom_vline(xintercept = 1)+
geom_hline(yintercept=-log10(0.05))+
xlim(c(-20,20))+
ylim(c(0,100))+
geom_text_repel(data= master_sig_up_top5, aes(label=rownames(master_sig_up_top5)))+
geom_text_repel(data= master_sig_down_top5,aes(label=rownames(master_sig_down_top5)))+
theme_classic()
ggp
png("D:\\Bioinformatics for wet lab course\\volcano.png", width=500,height=500)
print(ggp)
dev.off()
#MA PLOT
ggp2=ggplot(master,aes(x=log10(mean_expression),y=log2fold))+geom_point (aes(colour="a")) +
geom_point(data=master_sig_up,aes(colour="b")) +
geom_point (data= master_sig_down,aes(colour= "c"))+
scale_colour_manual(values=c("black","red","blue"), labels=c("no change", "up","down"))
labs(title = "MA plot", x="log10 mean", y= "fold change")+
geom_text_repel(data= master_sig_up_top5, aes(label=rownames(master_sig_up_top5)))+
geom_text_repel(data= master_sig_down_top5,aes(label=rownames(master_sig_down_top5)))+
theme_classic()
ggp2
png("D:\\Bioinformatics for wet lab course\\ma.png", width=500,height=500)
print(ggp2)
dev.off()
#tutorial 6
#sample
ss= read.table("D:\\bioinformatics for wet lab course\\sample_sheet (1).csv",header=TRUE, sep="\t")
#Factor returns  levels based on a pattern
ss$SAMPLE_GROUP= factor(ss$SAMPLE_GROUP,levels=c("gut","duct","node"))
# PCA_coordinates
numeric_expression_matrix = as.matrix(sapply(em_scaled,as.numeric))
pca = prcomp(t(numeric_expression_matrix))
pca_coordinates= data.frame(pca$x)
#Variance for each PCA
vars = apply (pca$x,2,var)
prop_PC1 = round (vars["PC1"]/sum(vars),4)*100
x_label= paste("PC1",prop_PC1,"%",sep = " ")
x_label
prop_PC2 = round (vars["PC2"]/sum(vars),4)*100
y_label= paste("PC2",prop_PC2,"%",sep = " ")
#PCA plot
pca_plot = ggplot (pca_coordinates, aes( x= PC1,y=PC2)) +
geom_point (aes(colour = ss$SAMPLE_GROUP)) +
scale_color_manual(values=c("pink","skyblue","green"))+
labs(title = "PCA plot", x= x_label, y= y_label)+
geom_text_repel (aes(label= ss$SAMPLE_GROUP))+
theme_classic()
pca_plot
#density plot for
density_plot_gut_1 = ggplot(em,aes(x=log10(gut_r1))) +geom_density()
density_plot_gut_1
em_melt = melt(em)
density_plot = ggplot (em_melt, aes(x=log10(value))) +geom_density()+
facet_wrap(em_melt$variable)
density_plot
#box_plot
gene_table = em_symbols["Tnf",]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
names(gene_table)= c("expression","group")
TNF_box_plot = ggplot (gene_table, aes(x=group, y=expression, colour = group))+
geom_boxplot()+
scale_color_manual(values = c("pink","orange","skyblue"))
TNF_box_plot
#make seperate boxplot for each of the three genes with lowet p value
master_sorted <- master[order(master$p.adj), ]
gene1 = row.names (master)[1]
gene2= row.names(master)[2]
gene3= row.names (master)[3]
#gene1
gene_table = em_symbols[gene1,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
names(gene_table)= c("expression","group")
TNF_box_plot = ggplot (gene_table, aes(x=group, y=expression, colour = group))+
geom_boxplot()+
scale_color_manual(values = c("pink","orange","skyblue"))
#make seperate boxplot for each of the three genes with lowet p value
master_sorted <- master[order(master$p.adj), ]
gene1 = row.names (master)[1]
gene2= row.names(master)[2]
gene3= row.names (master)[3]
#gene1
gene_table = em_symbols[gene1,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
names(gene_table)= c("expression","group")
TNF_box_plot = ggplot (gene_table, aes(x=group, y=expression, colour = group))+
geom_boxplot()+
scale_color_manual(values = c("pink","orange","skyblue"))
TNF_box_plot
#Task 3. Make a single boxplot including all 10 of the genes of lowest p
candidate_genes= row.names (master)[1:10]
gene_table = em_symbols[candidate_genes,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
gene_table_melt = melt(gene_table)
View(gene_table_melt)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= group) +
boxplot()+
facet_wrap(gene_table_melt$variable)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= group) +
geom_boxplot()+
facet_wrap(gene_table_melt$variable)
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)
gg_box_candidate
?id.vars
?melt
gene_table_melt = melt(gene_table,id.vars = group)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)
gg_box_candidate
#Task 3. Make a single boxplot including all 10 of the genes of lowest p
candidate_genes= row.names (master)[1:10]
gene_table = em_symbols_scaled[candidate_genes,]
View(em_symbols_sig)
View(em_scaled_sig)
#Task 3. Make a single boxplot including all 10 of the genes of lowest p
candidate_genes= row.names (master)[1:10]
gene_table = em_scaled[candidate_genes,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
gene_table_melt = melt(gene_table,id.vars = group)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)
gg_box_candidate
#Task 3. Make a single boxplot including all 10 of the genes of lowest p
candidate_genes= row.names (master)[1:10]
gene_table = em_scaled_sig[candidate_genes,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
gene_table_melt = melt(gene_table,id.vars = group)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # must be placed after any other theme
facet_wrap(gene_table_melt$variable)
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+# must be placed after any other theme
facet_wrap(gene_table_melt$variable,col=3)
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable,col=3)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
?melt
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable,col=3)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable,col=3)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable,col=3)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
?melt
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
?melt
source("D:/Bioinformatics for wet lab course/Tutorial 1.R")
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable, ncol=9)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable, ncol=9)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), colour= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable, ncol=9)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
#Task 3. Make a single boxplot including all 10 of the genes of lowest p
candidate_genes= row.names (master)[1:10]
gene_table = em_scaled[candidate_genes,]
gene_table= data.frame(t(gene_table))
gene_table$group = ss$SAMPLE_GROUP
gene_table_melt = melt(gene_table)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), fill= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable, ncol=9)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), fill= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable, ncol=9)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
ggp_candidate = ggplot(gene_data.m, aes(x=variable, y=value, fill = groups)) +
geom_boxplot()
ggp_candidate = ggplot(gene_table_melt, aes(x=variable, y=value, fill = groups)) +
geom_boxplot()
ggp_candidate
ggp_candidate = ggplot(gene_table_melt, aes(x=variable, y=value, fill = group)) +
geom_boxplot()
ggp_candidate
source("D:/Bioinformatics for wet lab course/Tutorial 1.R")
all_samples <- readRDS("D:/Final Project/objects/all_samples.rds")
View(all_samples)
sc_list <- readRDS("D:/Final Project/objects/sc_list.rds")
View(sc_list)
View(sc_list)
sc_list[["y_r"]][["CML_419"]]@meta.data
library(Seurat)
all_samples@meta.data
meta_out= all_samples[[meta.data]]
meta_out= all_samples@meta.data
meta_out$ID= names(meta_out)
View(meta_out)
meta_out$ID= row.names(meta_out)
cell_count_per_sample= sum(unique(meta_out$ID),group.by=meta_out$orig.ident)
cell_count_per_sample <- table(meta_out$orig.ident)
View(cell_count_per_sample)
mean_sequenced_cells = mean(cell_count_per_sample$Freq)
cell_count_per_sample= as.data.frame(cell_count_per_sample)
mean_sequenced_cells = mean(cell_count_per_sample$Freq)
median_sequenced_cells = median(cell_count_per_sample$Freq)
print (min(cell_count_per_sample$Freq))
print (max(cell_count_per_sample$Freq))
#median of 3085 cells were sequenced per sample ()
#minimum 1153
#max is 14054
mean(cell_count_per_sample$Freq)
setwd("D:\\PDAC_SCRNA")
setwd("D:\\PDAC_SCRNA")
install.packages("SoupX")
library(soupX)
remotes::install_github("chris-mcginnis-ucsf/DoubletFinder")
library(Seurat)
library(DoubletFinder)
library(sctransform)
library(glmGamPoi)
ss <- read_xlsx("ss.xlsx")
library(Seurat)
library(readxl)
library(stringr)
ss <- read_xlsx("ss.xlsx")
ss <- ss[!ss$Procedure == "liver", ]
# extract the file names
all_files <- list.files("GSE205013_RAW", full.names = TRUE)
sample_ids <- str_extract(all_files, "P[0-9]+")
unique_samples <- unique(sample_ids)
seurat_list <- list()
for (p in unique_samples) {
feat_file = all_files[grepl(paste0(p,".*features.tsv.gz"),all_files)]
bc_file = all_files[grepl(paste0(p,".*barcodes.tsv.gz"),all_files)]
mtx_file = all_files[grepl(paste0(p,".*matrix.mtx.gz"),all_files)]
data <- ReadMtx  (
mtx  = mtx_file,
features = feat_file,
cells = bc_file
)
sc_obj= CreateSeuratObject(counts = data,project = p,assay = "RNA")
#add metadata
meta_row = ss[ss$Sample_ID==p,] # the reason is to match meta to p
sc_obj$Treatment = meta_row$Treatment
sc_obj$Moffitt = meta_row$Moffitt
sc_obj$Stage = meta_row$Stage
seurat_list [[p]] <- sc_obj
}
seurat_list_no_liver = seurat_list[ss$Sample_ID] #I wanted to filter out liver
objects_file= "objects"
saveRDS(seurat_list_no_liver,paste0(objects_file,"seurat_list_no_liver.rds"))
rm(seurat_list)
View(seurat_list_no_liver)
sample= seurat_list_no_liver$P01
# Basic preprocessing
sample <- NormalizeData(sample)
sample <- ScaleData(sample)
# Basic preprocessing
sample <- NormalizeData(sample)
sample= seurat_list_no_liver$P01
sample= seurat_list_no_liver$P03
# Basic preprocessing
sample <- NormalizeData(sample)
sample <- FindVariableFeatures(sample, selection.method = "vst", nfeatures = 2000)
sample <- ScaleData(sample)
sample <- RunPCA(sample, verbose = FALSE)
DefaultAssay(sample) <- "RNA"
ElbowPlot(sample, reduction = "pca")
sample <- RunUMAP(sample, dims = 1:10)
sample <- FindNeighbors(sample, dims = 1:10)
sample <- FindClusters(sample, resolution = 0.2)
# Run parameter sweep to get best pK
sweep.res <- paramSweep_v3(seu, PCs = 1:10, sct = FALSE)
# Run parameter sweep to get best pK
sweep.res <- DoubletFinder::paramSweep(seu, PCs = 1:10, sct = FALSE)
# Run parameter sweep to get best pK
sweep.res <- DoubletFinder::paramSweep(sample, PCs = 1:10, sct = FALSE)
sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)
bcmvn <- find.pK(sweep.stats)
# Expected doublet rate (rule of thumb: ~1% per 1000 cells)
nCells <- ncol(sample)
exp.dbl.rate <- 0.01 * (nCells/1000)
nExp <- round(exp.dbl.rate * nCells)
# Homotypic adjustment
homotypic.prop <- modelHomotypic(sample$seurat_clusters)
nExp.adj <- round(nExp * (1 - homotypic.prop))
# Run DoubletFinder
sample <- doubletFinder_v3(sample,
PCs = 1:30,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = TRUE)
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = 1:30,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = TRUE)
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = 1:30,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = TRUE)
nExp.adj
best.pK <- as.numeric(as.vector(find.pK(sweep.stats)$pK[which.max(find.pK(sweep.stats)$BCmetric)]))
best.pK
sweep.stats
sample <- doubletFinder(sample,
PCs = 1:30,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = TRUE)
best.pK
sample <- doubletFinder(sample,
PCs = 1:30,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE)
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = 1:10,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE)
# Run DoubletFinder
sample <- doubletFinder(
sua = sample,
PCs = pcs_use,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE
)
doubletFinder
?doubletFinder
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = pcs_use,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE
)
pcs_use=1:10
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = pcs_use,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE
)
stopifnot(is.numeric(pcs_use), all(pcs_use %% 1 == 0))
# 2) Make sure PCA embeddings are a MATRIX (not a data.frame)
sample@reductions$pca@cell.embeddings <- as.matrix(Embeddings(sample, "pca"))
stopifnot(is.matrix(Embeddings(sample, "pca")))
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = pcs_use,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE
)
best.pK
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = pcs_use,
pN = 0.25,
pK =as.numeric  (best.pK),
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE
)
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = as.numeric(pcs_use),
pN = 0.25,
pK =as.numeric  (best.pK),
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE
)
nExp.adj
# Run DoubletFinder
sample <- doubletFinder(sample, PCs = 1:10, pN = 0.25, pK = 0.3, nExp = nExp.adj, reuse.pANN = NULL, sct = FALSE)
