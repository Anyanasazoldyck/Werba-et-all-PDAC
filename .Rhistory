p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = hm_palette)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
setwd("D:\\PDAC_SCRNA")
library(ggplot2)
library(Seurat)
library(readxl)
library(stringr)
all_samples_integrated <- readRDS("D:/PDAC_SCRNA/all_samples_integrated_dim_reduction.rds")
cluster_markers <- read.csv("csv/cluster_markers.csv",sep = " ",header = T)
View(cluster_markers)
markers <- read.csv("csv/cluster_markers.csv",sep = "",header = T)
View(markers)
> markers <- read_csv("csv/cluster_markers.csv"T)
markers <- read.csv("csv/cluster_markers.csv")
View(cluster_markers)
View(cluster_markers)
#filter markers
markers.sig <- markers[,"p_val_adj"<0.05 & "avg_log2FC">1]
genes <- unique(topn$gene)
#make a complex hm
library(tidyr)
topn=markers %>% dplyr::group_by(cluster) %>%
dplyr::arrange(desc(avg_log2FC), .by_group = T) %>% dplyr::slice_head(n=5)
genes <- unique(topn$gene)
# 1) Fetch expression for genes + cluster + cell IDs
df <- FetchData(all_samples_integrated, vars = genes)
df$seurat_clusters <- Idents(all_samples_integrated)
df$cell <- colnames(all_samples_integrated)
library(ggplot2)
library(Seurat)
library(readxl)
library(stringr)
df <- AverageExpression(all_samples_integrated,features = genes, group.by = seurat_clusters)
df <- AverageExpression(all_samples_integrated,features = genes, group.by = "seurat_clusters")
View(df)
head(df[["RNA"]])
# 1) Fetch expression for genes + cluster + cell IDs
df <- FetchData(all_samples_integrated, vars = genes)
# 1) Fetch expression for genes + cluster + cell IDs
df <- FetchData(all_samples_integrated, vars = genes)
df$cluster <- Idents(all_samples_integrated)
df$ cell <-colnames(all_samples_integrated)
colnames(df)
head(df)
df$ cell <-colnames(df)
# 1) Fetch expression for genes + cluster + cell IDs
df <- FetchData(all_samples_integrated, vars = genes)
df$cluster <- Idents(all_samples_integrated)
df$ cell <-colnames(df)
df$ cell <-rownames(df)
head(df,1:5)
head(df)
?pivot_longer
#make a complex hm
library(dplyr)
hm_mtx<- df %<%  group_by(df$cluster)
hm_mtx<- df %>%  group_by(df$cluster)
hm_mtx<- df %>%  group_by(df$cluster) %>% summarise(mean_expression=mean(genes))
df_longer<- pivot_longer(cols = "cluster",values_to = "gene")
library(tidyr)
df_longer<- pivot_longer(cols = "cluster",values_to = "gene")
df_longer<- pivot_longer(df,cols = "cluster",values_to = "gene")
View(df)
View(df_longer)
df_longer<- pivot_longer(df,cols = "cluster")
View(df_longer)
?pivot_wider
df_longer<- pivot_longer(cols = "cluster",names_to = genes, values_to = "expression")
df_longer<- pivot_longer(df,cols = "cluster",names_to = genes, values_to = "expression")
df_longer<- pivot_longer(df,cols = "cluster",names_to = "genes", values_to = "expression")
View(df_longer)
df_longer<- pivot_longer(df,cols = "cluster",names_to = "genes", values_to = "expression")
df$cluster <- Idents(all_samples_integrated)
df$ cell <-rownames(df)
colnames(df)
df_longer<- pivot_longer(df,cols = cluster,names_to = "genes", values_to = "expression")
# 1) Fetch expression for genes + cluster + cell IDs
df <- FetchData(all_samples_integrated, vars = genes)
df$cluster <- Idents(all_samples_integrated)
df_longer<- pivot_longer(df,cols = cluster,names_to = "genes", values_to = "expression")
head(df)
df_longer<- pivot_longer(df,cols = !cluster,names_to = "genes", values_to = "expression")
head(df_longer)
df_longer %<% group_by(cluster) %<% summarise(mean_expression =mean(expression))
df_longer %>% group_by(cluster) %>% summarise(mean_expression =mean(expression))
df_longer<- pivot_longer(df,cols = !cluster,names_to = "genes", values_to = "expression")
df_longer %>% group_by(c(cluster,genes)) %>% summarise(mean_expression =mean(expression),.groups = "keep")
df_longer %>% group_by(c("cluster","genes")) %>% summarise(mean_expression =mean(expression),.groups = "keep")
df_longer %>% group_by(cluster) %>% summarise(mean_expression =mean(expression),.groups = "keep")
?summarise
df_longer %>% group_by(cluster) %>% summarise(genes,mean_expression =mean(expression),.groups = "keep")
df_longer %>% group_by(cluster) %>% summarise(.by=genes,mean_expression =mean(expression),.groups = "keep")
df_longer %>% group_by(cluster) %>% summarise(.by=genes,mean_expression =mean(expression),.groups = "drop")
df_longer %>% group_by(cluster,genes) %>% summarise(mean_expression =mean(expression),.groups = "drop")
df_longer %>% group_by(cluster,genes) %>% summarise(mean_expression =mean(expression),.groups = "drop")
df_longer<-df_longer %>% group_by(cluster,genes) %>% summarise(mean_expression =mean(expression),.groups = "drop")
hm_mtx <- pivot_wider(df_longer,names_from = cluster, values_from = mean_expression)
View(hm_mtx)
rownames(hm_mtx)<-hm_mtx$genes
hm_mtx <- as.data.frame(pivot_wider(df_longer,names_from = cluster, values_from = mean_expression))
rownames(hm_mtx)<-hm_mtx$genes
hm_mtx$genes<-NULL
hm_mtx<-as.matrix(hm_mtx)
RColorBrewer::display.brewer.all(colorblindFriendly = T)
hm_palette = RColorBrewer::brewer.pal(name="RdYlBu", n=11)
library(ComplexHeatmap)
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = hm_palette)
mat<-as.matrix(hm_mtx)
RColorBrewer::display.brewer.all(colorblindFriendly = T)
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = hm_palette)
?RColorBrewer
cols <- colorRampPalette(brewer.pal(9, "RdYlBu"))(100)
library(RColorBrewer)
cols <- colorRampPalette(brewer.pal(9, "RdYlBu"))(100)
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
avg <- AverageExpression(all_samples_integrated,
features = genes,
group.by = "seurat_clusters",
assays = "RNA", slot = "data")$RNA
avg <- AverageExpression(all_samples_integrated,
features = genes,
group.by = "seurat_clusters",
assays = "RNA", slot = "data")
mat <- as.matrix(avg)
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
avg <- AverageExpression(all_samples_integrated,
features = genes,
group.by = "seurat_clusters",
assays = "RNA", slot = "data")
mat <- as.matrix(avg)
cols <- colorRampPalette(brewer.pal(9, "RdYlBu"))(100)
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
p
View(mat)
avg <- AverageExpression(all_samples_integrated,
features = genes,
group.by = "seurat_clusters",
assays = "RNA", slot = "data")$RNA
View(avg)
mat <- as.matrix(avg)
View(avg)
View(mat)
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
p=Heatmap(mat, name = "Z-score",
cluster_rows = F, cluster_columns = T,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
df <- FetchData(all_samples_integrated, vars = genes)
df$cluster <- Idents(all_samples_integrated)[rownames(df)]
head(df)
df_longer<- pivot_longer(df,cols = !cluster,names_to = "genes", values_to = "expression")
df_longer<-df_longer %>% group_by(cluster,genes) %>% summarise(mean_expression =mean(expression),.groups = "drop")
hm_mtx <- as.data.frame(pivot_wider(df_longer,names_from = cluster, values_from = mean_expression))
mat <- t(scale(t(as.matrix(hm_mtx))))
df_longer<- pivot_longer(df,cols = !cluster,names_to = "genes", values_to = "expression")
df_longer<-df_longer %>% group_by(cluster,genes) %>% summarise(mean_expression =mean(expression),.groups = "drop")
hm_mtx <- as.data.frame(pivot_wider(df_longer,names_from = cluster, values_from = mean_expression))
rownames(hm_mtx)<-hm_mtx$genes
hm_mtx$genes<-NULL
hm_mtx
mat <- t(scale(t(as.matrix(hm_mtx))))
mat
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
all_samples_integrated=DefaultAssay(all_samples_integrated,"RNA")
DefaultAssay(all_samples_integrated) <- "RNA"
df <- FetchData(all_samples_integrated, vars = genes)
df$cluster <- Idents(all_samples_integrated)[rownames(df)]
colnames(df)
View(all_samples_integrated)
df <- FetchData(all_samples_integrated, vars = genes,layer = "data")
df$cluster <- Idents(all_samples_integrated)[rownames(df)]
colnames(df)
df <- FetchData(all_samples_integrated, vars = genes,layer = "count")
df$cluster <- Idents(all_samples_integrated)[rownames(df)]
colnames(df)
DefaultAssay(all_samples_integrated) <- "integrated"
topn=markers %>% dplyr::group_by(cluster) %>%
dplyr::arrange(p_val_adj, .by_group = T) %>% dplyr::slice_head(n=5)
topn
?topn
topn$gene
topn=markers %>% dplyr::group_by(cluster) %>%
dplyr::arrange(p_val_adj, .by_group = T) %>% dplyr::slice_head(n=5)
p=DoHeatmap(all_samples_integrated, features = topn$gene)
png("plots/heatmap.png", res = 300, width = 300*8, height = 300*8)
p
dev.off()
#make a complex hm
genes <- unique(topn$gene)
all_samples_integrated=DefaultAssay(all_samples_integrated,"RNA")
#make a complex hm
DefaultAssay(all_samples_integrated)<-"RNA"
genes <- unique(topn$gene)
df <- FetchData(all_samples_integrated, vars = genes)
df$cluster <- Idents(all_samples_integrated)[rownames(df)]
colnames(df)
head(df)
df_longer<- pivot_longer(df,cols = !cluster,names_to = "genes", values_to = "expression")
df_longer<-df_longer %>% group_by(cluster,genes) %>% summarise(mean_expression =mean(expression),.groups = "drop")
hm_mtx <- as.data.frame(pivot_wider(df_longer,names_from = cluster, values_from = mean_expression))
rownames(hm_mtx)<-hm_mtx$genes
hm_mtx$genes<-NULL
mat <- t(scale(t(as.matrix(hm_mtx))))
p=Heatmap(mat, name = "Z-score",
cluster_rows = T, cluster_columns = F,
show_row_names = TRUE, show_column_names = TRUE, color_space = cols)
png("plots/complexheatmap.png", res = 300, width = 300*8, height = 300*10)
p
dev.off()
write.csv(topn,"csv/top_cluster_markers.csv")
?colorRampPalette
#define color pal
cols = colorRampPalette(brewer.pal(9, "RdYlBu"),bias=100)
View(cols)
#define color pal
cols = colorRampPalette(brewer.pal(9, "RdYlBu"))(100)
ss <- read_xlsx("csv/ss.xlsx",sheet = "Sheet1")
library(readxl)
ss <- read_xlsx("csv/ss.xlsx",sheet = "Sheet1")
library(ComplexHeatmap)
library(circlize)
# Example: your sample sheet
ss <- data.frame(
Sample_ID = c("P01","P02","P03","P04","P05","P06","P07","P08","P09","P10","P11"),
Treatment = c("naive","naive","treated","naive","naive","treated","treated","treated","naive","treated","naive"),
Procedure = c("liver","liver","resection","resection","resection","eus","resection","resection","eus","resection","liver"),
Moffitt = c("classic","intermed","intermed","classic","classic","intermed","classic","classic","classic","intermed","basal"),
Stage = c("metastatic","metastatic","resec","resec","resec","borderline","resec","borderline","metastatic","borderline","metastatic"),
stringsAsFactors = TRUE
)
rownames(ss) <- ss$Sample_ID
ss <- ss[ , -1]  # drop Sample_ID column
# Define colors per category
treatment_col <- c("naive"="skyblue", "treated"="tomato")
procedure_col <- c("liver"="gold", "resection"="forestgreen", "eus"="purple")
moffitt_col <- c("classic"="steelblue", "intermed"="orange", "basal"="red")
stage_col <- c("metastatic"="firebrick", "resec"="darkgreen", "borderline"="gray60")
# Create HeatmapAnnotation
ha <- HeatmapAnnotation(
Treatment = ss$Treatment,
Procedure = ss$Procedure,
Moffitt = ss$Moffitt,
Stage = ss$Stage,
col = list(
Treatment = treatment_col,
Procedure = procedure_col,
Moffitt = moffitt_col,
Stage = stage_col
),
annotation_legend_param = list(
Treatment = list(title = "Treatment"),
Procedure = list(title = "Procedure"),
Moffitt = list(title = "Moffitt"),
Stage = list(title = "Stage")
)
)
# Empty matrix just to carry the annotations
mat <- matrix(1, nrow=1, ncol=nrow(ss))
colnames(mat) <- rownames(ss)
Heatmap(
mat,
name = "Samples",
top_annotation = ha,
cluster_columns = FALSE,
cluster_rows = FALSE,
show_heatmap_legend = FALSE,
show_row_names = FALSE,
show_column_names = TRUE
)
ss <- read_xlsx("csv/ss.xlsx",sheet = "Sheet1")
rownames(ss) <- ss$Sample_ID
rownames(ss) <- ss$Sample_ID
ss <- ss[ , -1]  # drop Sample_ID column
# Define colors per category
treatment_col <- c("naive"="skyblue", "treated"="tomato")
procedure_col <- c("liver"="gold", "resection"="forestgreen", "eus"="purple")
moffitt_col <- c("classic"="steelblue", "intermed"="orange", "basal"="red")
stage_col <- c("metastatic"="firebrick", "resec"="darkgreen", "borderline"="gray60")
# Create HeatmapAnnotation
ha <- HeatmapAnnotation(
Treatment = ss$Treatment,
Procedure = ss$Procedure,
Moffitt = ss$Moffitt,
Stage = ss$Stage,
col = list(
Treatment = treatment_col,
Procedure = procedure_col,
Moffitt = moffitt_col,
Stage = stage_col
),
annotation_legend_param = list(
Treatment = list(title = "Treatment"),
Procedure = list(title = "Procedure"),
Moffitt = list(title = "Moffitt"),
Stage = list(title = "Stage")
)
)
# Empty matrix just to carry the annotations
mat <- matrix(1, nrow=1, ncol=nrow(ss))
colnames(mat) <- rownames(ss)
Heatmap(
mat,
name = "Samples",
top_annotation = ha,
cluster_columns = FALSE,
cluster_rows = FALSE,
show_heatmap_legend = FALSE,
show_row_names = FALSE,
show_column_names = TRUE
)
View(ss)
ss <- read_xlsx("csv/ss.xlsx",sheet = "Sheet1")
View(ss)
ss<-as.data.frame(ss)
rownames(ss) <- ss$Sample_ID
ss <- ss[ , -1]  # drop Sample_ID column
# Define colors per category
treatment_col <- c("naive"="skyblue", "treated"="tomato")
procedure_col <- c("liver"="gold", "resection"="forestgreen", "eus"="purple")
moffitt_col <- c("classic"="steelblue", "intermed"="orange", "basal"="red")
stage_col <- c("metastatic"="firebrick", "resec"="darkgreen", "borderline"="gray60")
# Create HeatmapAnnotation
ha <- HeatmapAnnotation(
Treatment = ss$Treatment,
Procedure = ss$Procedure,
Moffitt = ss$Moffitt,
Stage = ss$Stage,
col = list(
Treatment = treatment_col,
Procedure = procedure_col,
Moffitt = moffitt_col,
Stage = stage_col
),
annotation_legend_param = list(
Treatment = list(title = "Treatment"),
Procedure = list(title = "Procedure"),
Moffitt = list(title = "Moffitt"),
Stage = list(title = "Stage")
)
)
# Empty matrix just to carry the annotations
mat <- matrix(1, nrow=1, ncol=nrow(ss))
colnames(mat) <- rownames(ss)
Heatmap(
mat,
name = "Samples",
top_annotation = ha,
cluster_columns = FALSE,
cluster_rows = FALSE,
show_heatmap_legend = FALSE,
show_row_names = FALSE,
show_column_names = TRUE
)
?Heatmap
Heatmap(
mat,
name = "meta",
col = c("1"="white"),  # filler
cluster_rows = FALSE,
cluster_columns = FALSE,
show_row_names = TRUE,
show_column_names = TRUE,
cell_fun = function(j, i, x, y, w, h, fill) {
category <- rownames(mat)[i]
value <- ss[colnames(mat)[j], category]
grid.rect(x, y, w, h, gp = gpar(fill=col_fun[[category]][value], col="black", lwd=0.5))
}
)
# Map category → color
col_fun <- list(
Treatment = treatment_col,
Procedure = procedure_col,
Moffitt = moffitt_col,
Stage = stage_col
)
Heatmap(
mat,
name = "meta",
col = c("1"="white"),  # filler
cluster_rows = FALSE,
cluster_columns = FALSE,
show_row_names = TRUE,
show_column_names = TRUE,
cell_fun = function(j, i, x, y, w, h, fill) {
category <- rownames(mat)[i]
value <- ss[colnames(mat)[j], category]
grid.rect(x, y, w, h, gp = gpar(fill=col_fun[[category]][value], col="black", lwd=0.5))
}
)
library(ComplexHeatmap)
# Example sample sheet
ss <- data.frame(
Sample_ID = c("P01","P02","P03","P04","P05","P06"),
Treatment = c("naive","naive","treated","naive","treated","treated"),
Procedure = c("liver","liver","resection","resection","eus","resection"),
Moffitt = c("classic","intermed","basal","classic","basal","intermed"),
Stage = c("metastatic","metastatic","resec","resec","borderline","borderline"),
stringsAsFactors = TRUE
)
rownames(ss) <- ss$Sample_ID
ss <- ss[ , -1]  # drop Sample_ID column
# Define colors
treatment_col <- c("naive"="skyblue", "treated"="tomato")
procedure_col <- c("liver"="gold", "resection"="forestgreen", "eus"="purple")
moffitt_col <- c("classic"="steelblue", "intermed"="orange", "basal"="red")
stage_col <- c("metastatic"="firebrick", "resec"="darkgreen", "borderline"="gray60")
ss <- read_xlsx("csv/ss.xlsx",sheet = "Sheet1")
library(ComplexHeatmap)
rownames(ss) <- ss$Sample_ID
ss<-as.data.frame(ss)
rownames(ss) <- ss$Sample_ID
ss <- ss[ , -1]  # drop Sample_ID column
# Define colors
treatment_col <- c("naive"="skyblue", "treated"="tomato")
procedure_col <- c("liver"="gold", "resection"="forestgreen", "eus"="purple")
moffitt_col <- c("classic"="steelblue", "intermed"="orange", "basal"="red")
stage_col <- c("metastatic"="firebrick", "resec"="darkgreen", "borderline"="gray60")
# Create annotation
ha <- HeatmapAnnotation(
Treatment = ss$Treatment,
Procedure = ss$Procedure,
Moffitt = ss$Moffitt,
Stage = ss$Stage,
col = list(
Treatment = treatment_col,
Procedure = procedure_col,
Moffitt = moffitt_col,
Stage = stage_col
)
)
# Dummy matrix to plot with outlined cells
mat <- matrix(1, nrow=4, ncol=nrow(ss)) # 4 = number of categories
rownames(mat) <- c("Treatment","Procedure","Moffitt","Stage")
colnames(mat) <- rownames(ss)
# Map category → color
col_fun <- list(
Treatment = treatment_col,
Procedure = procedure_col,
Moffitt = moffitt_col,
Stage = stage_col
)
# Heatmap with outlines
ht <- Heatmap(
mat,
name = "meta",
col = c("1"="white"),  # filler
cluster_rows = FALSE,
cluster_columns = FALSE,
show_row_names = TRUE,
show_column_names = TRUE,
cell_fun = function(j, i, x, y, w, h, fill) {
category <- rownames(mat)[i]
value <- ss[colnames(mat)[j], category]
grid.rect(x, y, w, h, gp = gpar(fill=col_fun[[category]][value], col="black", lwd=0.5))
}
)
draw(ht, heatmap_legend_side = "right")
draw(treatment_col <- c("naive"="skyblue", "treated"="tomato")
procedure_col <- c("liver"="gold", "resection"="forestgreen", "eus"="purple")
# Heatmap with outlines
ht <- Heatmap(
mat,
name = "meta",
col = c("1"="white"),  # filler
cluster_rows = FALSE,
cluster_columns = FALSE,
show_row_names = TRUE,
show_column_names = TRUE,
)
draw(ht)
Heatmap(
mat,
name = "Samples",
top_annotation = ha,
cluster_columns = FALSE,
cluster_rows = FALSE,
show_heatmap_legend = FALSE,
show_row_names = FALSE,
show_column_names = TRUE
)
