gene_table$group = ss$SAMPLE_GROUP
gene_table_melt = melt(gene_table)
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), fill= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable, ncol=9)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
gg_box_candidate = ggplot (gene_table_melt, aes(x=group, y=value), fill= gene_table_melt$group) +
geom_boxplot()+
scale_alpha_manual(values = c("pink","orange","green"))+
facet_wrap(gene_table_melt$variable, ncol=9)+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ # must be placed after any other theme
gg_box_candidate
ggp_candidate = ggplot(gene_data.m, aes(x=variable, y=value, fill = groups)) +
geom_boxplot()
ggp_candidate = ggplot(gene_table_melt, aes(x=variable, y=value, fill = groups)) +
geom_boxplot()
ggp_candidate
ggp_candidate = ggplot(gene_table_melt, aes(x=variable, y=value, fill = group)) +
geom_boxplot()
ggp_candidate
source("D:/Bioinformatics for wet lab course/Tutorial 1.R")
all_samples <- readRDS("D:/Final Project/objects/all_samples.rds")
View(all_samples)
sc_list <- readRDS("D:/Final Project/objects/sc_list.rds")
View(sc_list)
View(sc_list)
sc_list[["y_r"]][["CML_419"]]@meta.data
library(Seurat)
all_samples@meta.data
meta_out= all_samples[[meta.data]]
meta_out= all_samples@meta.data
meta_out$ID= names(meta_out)
View(meta_out)
meta_out$ID= row.names(meta_out)
cell_count_per_sample= sum(unique(meta_out$ID),group.by=meta_out$orig.ident)
cell_count_per_sample <- table(meta_out$orig.ident)
View(cell_count_per_sample)
mean_sequenced_cells = mean(cell_count_per_sample$Freq)
cell_count_per_sample= as.data.frame(cell_count_per_sample)
mean_sequenced_cells = mean(cell_count_per_sample$Freq)
median_sequenced_cells = median(cell_count_per_sample$Freq)
print (min(cell_count_per_sample$Freq))
print (max(cell_count_per_sample$Freq))
#median of 3085 cells were sequenced per sample ()
#minimum 1153
#max is 14054
mean(cell_count_per_sample$Freq)
setwd("D:\\PDAC_SCRNA")
setwd("D:\\PDAC_SCRNA")
install.packages("SoupX")
library(soupX)
remotes::install_github("chris-mcginnis-ucsf/DoubletFinder")
library(Seurat)
library(DoubletFinder)
library(sctransform)
library(glmGamPoi)
ss <- read_xlsx("ss.xlsx")
library(Seurat)
library(readxl)
library(stringr)
ss <- read_xlsx("ss.xlsx")
ss <- ss[!ss$Procedure == "liver", ]
# extract the file names
all_files <- list.files("GSE205013_RAW", full.names = TRUE)
sample_ids <- str_extract(all_files, "P[0-9]+")
unique_samples <- unique(sample_ids)
seurat_list <- list()
for (p in unique_samples) {
feat_file = all_files[grepl(paste0(p,".*features.tsv.gz"),all_files)]
bc_file = all_files[grepl(paste0(p,".*barcodes.tsv.gz"),all_files)]
mtx_file = all_files[grepl(paste0(p,".*matrix.mtx.gz"),all_files)]
data <- ReadMtx  (
mtx  = mtx_file,
features = feat_file,
cells = bc_file
)
sc_obj= CreateSeuratObject(counts = data,project = p,assay = "RNA")
#add metadata
meta_row = ss[ss$Sample_ID==p,] # the reason is to match meta to p
sc_obj$Treatment = meta_row$Treatment
sc_obj$Moffitt = meta_row$Moffitt
sc_obj$Stage = meta_row$Stage
seurat_list [[p]] <- sc_obj
}
seurat_list_no_liver = seurat_list[ss$Sample_ID] #I wanted to filter out liver
objects_file= "objects"
saveRDS(seurat_list_no_liver,paste0(objects_file,"seurat_list_no_liver.rds"))
rm(seurat_list)
View(seurat_list_no_liver)
sample= seurat_list_no_liver$P01
# Basic preprocessing
sample <- NormalizeData(sample)
sample <- ScaleData(sample)
# Basic preprocessing
sample <- NormalizeData(sample)
sample= seurat_list_no_liver$P01
sample= seurat_list_no_liver$P03
# Basic preprocessing
sample <- NormalizeData(sample)
sample <- FindVariableFeatures(sample, selection.method = "vst", nfeatures = 2000)
sample <- ScaleData(sample)
sample <- RunPCA(sample, verbose = FALSE)
DefaultAssay(sample) <- "RNA"
ElbowPlot(sample, reduction = "pca")
sample <- RunUMAP(sample, dims = 1:10)
sample <- FindNeighbors(sample, dims = 1:10)
sample <- FindClusters(sample, resolution = 0.2)
# Run parameter sweep to get best pK
sweep.res <- paramSweep_v3(seu, PCs = 1:10, sct = FALSE)
# Run parameter sweep to get best pK
sweep.res <- DoubletFinder::paramSweep(seu, PCs = 1:10, sct = FALSE)
# Run parameter sweep to get best pK
sweep.res <- DoubletFinder::paramSweep(sample, PCs = 1:10, sct = FALSE)
sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)
bcmvn <- find.pK(sweep.stats)
# Expected doublet rate (rule of thumb: ~1% per 1000 cells)
nCells <- ncol(sample)
exp.dbl.rate <- 0.01 * (nCells/1000)
nExp <- round(exp.dbl.rate * nCells)
# Homotypic adjustment
homotypic.prop <- modelHomotypic(sample$seurat_clusters)
nExp.adj <- round(nExp * (1 - homotypic.prop))
# Run DoubletFinder
sample <- doubletFinder_v3(sample,
PCs = 1:30,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = TRUE)
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = 1:30,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = TRUE)
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = 1:30,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = TRUE)
nExp.adj
best.pK <- as.numeric(as.vector(find.pK(sweep.stats)$pK[which.max(find.pK(sweep.stats)$BCmetric)]))
best.pK
sweep.stats
sample <- doubletFinder(sample,
PCs = 1:30,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = TRUE)
best.pK
sample <- doubletFinder(sample,
PCs = 1:30,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE)
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = 1:10,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE)
# Run DoubletFinder
sample <- doubletFinder(
sua = sample,
PCs = pcs_use,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE
)
doubletFinder
?doubletFinder
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = pcs_use,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE
)
pcs_use=1:10
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = pcs_use,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE
)
stopifnot(is.numeric(pcs_use), all(pcs_use %% 1 == 0))
# 2) Make sure PCA embeddings are a MATRIX (not a data.frame)
sample@reductions$pca@cell.embeddings <- as.matrix(Embeddings(sample, "pca"))
stopifnot(is.matrix(Embeddings(sample, "pca")))
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = pcs_use,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE
)
best.pK
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = pcs_use,
pN = 0.25,
pK =as.numeric  (best.pK),
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE
)
# Run DoubletFinder
sample <- doubletFinder(sample,
PCs = as.numeric(pcs_use),
pN = 0.25,
pK =as.numeric  (best.pK),
nExp = nExp.adj,
reuse.pANN = FALSE,
sct = FALSE
)
nExp.adj
# Run DoubletFinder
sample <- doubletFinder(sample, PCs = 1:10, pN = 0.25, pK = 0.3, nExp = nExp.adj, reuse.pANN = NULL, sct = FALSE)
#---------------doublet finder per sample------------------------
#set a file dir
doublets_finder= file.path(plots,"doublets")
run_doubletfinder_lognorm <- function(
seu,
elbow_drop = 0.5,
target_cumvar = 90,
min_pc_floor = 5,
resolution = 0.1)
{
# Basic preprocessing
DefaultAssay(seu) <- "RNA"
seu <- NormalizeData(seu, verbose = FALSE)
seu <- FindVariableFeatures(seu, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
seu <- ScaleData(seu, verbose = FALSE)
seu <- RunPCA(seu, verbose = FALSE)
# ---- chose PC "Squid Stat" ----
stdev <- seu@reductions$pca@stdev
percent_var <- (stdev^2 / sum(stdev^2)) * 100 #elbow plot values
cumulative_var <- cumsum(percent_var)
PC1 <- which(cumulative_var > target_cumvar)[1]
dvar <- diff(percent_var)
PC2 <- which(dvar < elbow_drop)[1] + 1
min_pc <- max(min_pc_floor, min(PC1, PC2))
min_pc= as.numeric(min_pc)
pcs_use <- 1:min_pc
#find seurat clusters
seu <- FindNeighbors(seu, dims = pcs_use, verbose = FALSE)
seu <- FindClusters(seu, resolution = resolution, verbose = FALSE)
# PK
sweep.res <- paramSweep(seu, PCs = pcs_use, sct = F)
sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)
best.pK <- as.numeric(as.vector(find.pK(sweep.stats)$pK[which.max(find.pK(sweep.stats)$BCmetric)]))
# ---- Estimate multiplet rate from 10x lookup table ----
print(">> Estimating multiplet rate from 10x table...")
multiplet_rates_10x <- data.frame( 'Multiplet_rate'= c(0.004, 0.008, 0.0160, 0.023, 0.031, 0.039, 0.046, 0.054, 0.061, 0.069, 0.076),
'Loaded_cells' = c(800, 1600, 3200, 4800, 6400, 8000, 9600, 11200, 12800, 14400, 16000),
'Recovered_cells' = c(500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000) )
multiplet_rate <- multiplet_rates_10x %>% dplyr::filter(Recovered_cells < nrow(seu@meta.data)) %>%
dplyr::slice(which.max(Recovered_cells)) %>%
dplyr::select(Multiplet_rate) %>%
as.numeric(as.character())
# ---- Homotypic adjustment ----
annotations <- seu@meta.data$seurat_clusters
# use the clusters as the user-defined cell types
homotypic.prop <- modelHomotypic(annotations)
nExp.poi <- round(multiplet_rate * nrow(seu@meta.data)) # multiply by number of cells to get the number of expected multiplets
nExp.adj <- round(nExp.poi * (1 - homotypic.prop)) # expected number of doublets
# ---- Run DoubletFinder ----
print(">> Running DoubletFinder...")
seu <- DoubletFinder::doubletFinder(
seu = seu,
PCs = pcs_use,
pN = 0.25,
pK = best.pK,
nExp = nExp.adj,
sct = FALSE
)
df.col <- grep("^DF.classification", colnames(seu@meta.data), value = TRUE)[1]
seu <- subset(seu, cells = colnames(seu)[seu@meta.data[[df.col]] == "Singlet"])
# Return results + parameters for audit
list(seu)
}
objectsseurat_list_no_liver <- readRDS("D:/PDAC_SCRNA/objects/objectsseurat_list_no_liver.rds")
#install doublet finder
remotes::install_github('chris-mcginnis-ucsf/DoubletFinder', force = TRUE)
library(DoubletFinder)
dim(seu)
seu=objectsseurat_list_no_liver$P03
dim(seu)
length(colnames(seu))
library(seurat)
seu=objectsseurat_list_no_liver$P03
View(seu)
View(seu@meta.data)
seu <- NormalizeData(seu, verbose = FALSE)
library(seurat)
library(seurat)
library(Seurat)
seu <- NormalizeData(seu, verbose = FALSE)
seu <- FindVariableFeatures(seu, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
seu <- ScaleData(seu, verbose = FALSE)
seu <- RunPCA(seu, verbose = FALSE)
library(Seurat)
library(DoubletFinder)
seu=objectsseurat_list_no_liver$P03
View(seu)
View(seu@meta.data)
# ---- chose PC "Squid Stat" ----
ElbowPlot(seu)
seu <- RunPCA(seu, verbose = FALSE)
library(Seurat)
#install doublet finder
#remotes::install_github('chris-mcginnis-ucsf/DoubletFinder', force = TRUE)
library(DoubletFinder)
seu=objectsseurat_list_no_liver$P03
View(seu)
View(seu@meta.data)
#filter low quality cells
seu[["percent.mt"]]= PercentageFeatureSet(seu, pattern = "^MT")
VlnPlot(seu, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
VlnPlot(seu, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0)
View(seu)
seu=objectsseurat_list_no_liver$P03
View(seu)
View(seu@meta.data)
#filter low quality cells
seu[["percent.mt"]]= PercentageFeatureSet(seu, pattern = "^MT")
seu=objectsseurat_list_no_liver$P03
#filter low quality cells
seu[["percent.mt"]]= PercentageFeatureSet(seu, pattern = "^MT")
VlnPlot(seu, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0)
FeatureScatter(seu, feature1 ="nCount_RNA", feature2 = "nFeature_RNA" )
seu=subset(seu, nFeature_RNA >500 & nCount_RNA >500 , percent.mt <15)
seu=subset(seu, nFeature_RNA >500 & nCount_RNA >500 & percent.mt <15)
library(Seurat)
#install doublet finder
#remotes::install_github('chris-mcginnis-ucsf/DoubletFinder', force = TRUE)
library(DoubletFinder)
seu=objectsseurat_list_no_liver$P03
View(seu)
View(seu@meta.data)
#filter low quality cells
seu[["percent.mt"]] = PercentageFeatureSet(seu, pattern = "^MT")
VlnPlot(seu, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
VlnPlot(seu, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0)
seu= subset(seu, nFeature_RNA >500 & nCount_RNA >1500 & percent.mt <15)
#normalize
seu <- NormalizeData(seu, verbose = FALSE)
seu <- FindVariableFeatures(seu, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
seu <- ScaleData(seu, verbose = FALSE)
seu <- RunPCA(seu, verbose = FALSE)
seu <- NormalizeData(seu, verbose = FALSE)
seu <- FindVariableFeatures(seu, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
seu <- ScaleData(seu, verbose = FALSE)
seu <- RunPCA(seu, verbose = FALSE)
# ---- chose PC "Squid Stat" ----
ElbowPlot(seu)
pcs_use=1:10
#find seurat clusters
seu <- FindNeighbors(seu, dims = pcs_use, verbose = FALSE)
seu <- FindClusters(seu, resolution = 0.5, verbose = FALSE)
seu < RunUMAP(seu,dims = pcs_use, spread = 8, min.dist = 0.2 )
View(seu)
DimPlot(seu, reduction = "umap")
seu < RunUMAP(seu,dims = pcs_use, spread = 8, min.dist = 0.2 , reduction.name = "umap")
View(seu)
DimPlot(seu, reduction = "umap")
seu <- RunPCA(seu, verbose = FALSE)
pcs_use=1:10
seu <- RunPCA(seu, verbose = FALSE)
ElbowPlot(seu)
pcs_use=1:10
# ---- chose PC "Squid Stat" ----
ElbowPlot(seu)
View(seu)
View(seu@meta.data)
seu < RunUMAP(seu, spread = 8, min.dist = 0.2 , reduction.name = "umap")
seu < RunUMAP(seu, spread = 8, min.dist = 0.2 , reduction.name = "umap", dims = pcs_use)
seu <- NormalizeData(seu, verbose = FALSE)
seu <- FindVariableFeatures(seu, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
seu <- ScaleData(seu, verbose = FALSE)
seu <- RunPCA(seu, verbose = FALSE)
ElbowPlot(seu)
pcs_use=1:10
# ---- chose PC "Squid Stat" ----
ElbowPlot(seu)
#find seurat clusters
seu <- FindNeighbors(seu, dims = pcs_use, verbose = FALSE)
seu <- FindClusters(seu, resolution = 0.5, verbose = FALSE)
View(seu)
View(seu@meta.data)
seu <- RunUMAP(seu, dims =pcs_use, spread = 8, min.dist = 0.2)
View(seu)
DimPlot(seu, reduction = "umap", pt.size = 0.5)
seu <- FindClusters(seu, resolution = 0.2, verbose = FALSE)
seu <- RunUMAP(seu, dims =pcs_use, spread = 8, min.dist = 0.2)
DimPlot(seu, reduction = "umap", pt.size = 0.5)
# PK
sweep.res <- paramSweep(seu, PCs = pcs_use, sct = F)
sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)
View(sweep.stats)
best.pk <- as.numeric(find.pK(sweep.stats))
best.pk <- find.pK(sweep.stats)
best.pk
best.pk <- find.pK(sweep.stats)
View(best.pk)
?find.pK
library(ggplot2)
ggplot(best.pk, aes(x = as.numeric(as.character(pK)),
y = BCmetric)) +
geom_point() + geom_line() +
xlab("pK (neighborhood size)") +
ylab("BCmetric (bimodality)") +
theme_minimal()
ggplot(best.pk, aes(x = as.numeric(as.character(pK)),
y = BCmetric)) +
geom_point() +
xlab("pK") +
ylab("BCmetric") +
theme_minimal()
sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)
View(sweep.stats)
best.pk <- find.pK(sweep.stats, )
best.pk <- find.pK(sweep.stats )
best.pk <- find.pK(sweep.stats )
best.pk
View(best.pk)
best.pk <- find.pK(sweep.stats )
ggplot2::ggplot(best.pk, aes(x=pk, y=BCmetric))+
geom_point()+geom_line()
ggplot2::ggplot(best.pk, aes(x=pK, y=BCmetric))+
geom_point()+geom_line()
my_best_pk= best.pk$pK[which.max(best.pk$BCmetric)]
my_best_pk
best.pK <- as.numeric(as.character(best.pK))
my_best_pk <- as.numeric(as.character(my_best_pk))
View(best.pk)
best.pk <- find.pK(sweep.stats )
ggplot(best.pk, aes(x=pK, y=BCmetric))+
geom_line()
ggplot(best.pk, aes(x=pK, y=BCmetric))+
geom_point()+
geom_line()
my_best_pk= 0.15
#estimate the multiplate rate
length(colnames(seu))
View(seu)
meow= objectsseurat_list_no_liver$P03
length(colnames(meow))
rm(meow)
multiplet_rates_10x <- data.frame( 'Multiplet_rate'= c(0.004, 0.008, 0.0160, 0.023, 0.031, 0.039, 0.046, 0.054, 0.061, 0.069, 0.076),
'Loaded_cells' = c(800, 1600, 3200, 4800, 6400, 8000, 9600, 11200, 12800, 14400, 16000),
'Recovered_cells' = c(500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000) )
multiplet_rate <- multiplet_rates_10x %>% dplyr::filter(Recovered_cells < nrow(seu@meta.data)) %>%
dplyr::slice(which.max(Recovered_cells)) %>%
dplyr::select(Multiplet_rate) %>%
as.numeric(as.character())
multiplet_rate=
library(dplyr)
multiplet_rates_10x <- data.frame( 'Multiplet_rate'= c(0.004, 0.008, 0.0160, 0.023, 0.031, 0.039, 0.046, 0.054, 0.061, 0.069, 0.076),
'Loaded_cells' = c(800, 1600, 3200, 4800, 6400, 8000, 9600, 11200, 12800, 14400, 16000),
'Recovered_cells' = c(500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000) )
multiplet_rate <- multiplet_rates_10x %>% dplyr::filter(Recovered_cells < nrow(seu@meta.data)) %>%
dplyr::slice(which.max(Recovered_cells)) %>%
dplyr::select(Multiplet_rate) %>%
as.numeric(as.character())
#estimate the multiplate rate
length(colnames(seu))
multiplet_rate= 0.08
nExp.poi <- round(multiplet_rate * nrow(seu@meta.data)) # multiply by number of cells to get the number of expected multiplets
# ---- Homotypic adjustment ----
annotations <- seu@meta.data$seurat_clusters
homotypic.prop <- modelHomotypic(annotations)
nExp.adj <- round(nExp.poi * (1 - homotypic.prop)) # expected number of doublets
seu <- DoubletFinder::doubletFinder(
seu = seu,
PCs = pcs_use,
pN = 0.25,
pK = my_best_pk,
nExp = nExp.adj,
sct = FALSE
)
View(seu)
View(seu@meta.data)
meta_unfiltered = seu@meta.data
seu <- subset(seu, cells = colnames(seu)[seu@meta.data[["DF.classifications_0.25_0.15_1145"]] == "Singlet"])
View(seu)
View(seu@meta.data)
