all_samples <- readRDS("D:/PDAC_SCRNA/objects/all_seurat_complete_infercnv.rds")
sc.subset <- subset(all_samples, subset =cell.types %in% c("Epithelial", "Prolif_Epithelial"))
library(ggplot2)
library(Seurat)
library(readxl)
library(stringr)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library (ggplot2)
library(patchwork)
sc.subset <- NormalizeData(sc.subset, normalization.method = "LogNormalize")
sc.subset <- FindVariableFeatures(sc.subset, selection.method = "vst", nfeatures = 2000)
sc.subset <- ScaleData(sc.subset)
sc.subset <- RunPCA(sc.subset, features = VariableFeatures(object = sc.subset))
ElbowPlot(sc.subset)
dims_to_use <- 1:20
sc.subset <- FindNeighbors(sc.subset, dims = dims_to_use)
sc.subset <- FindClusters(sc.subset, resolution = 0.5)
sc.subset <- RunUMAP(sc.subset, dims = dims_to_use, spread = 3, min.dist = 0.05)
gs <- list(Classical = moffitt$Classical,
Basal     = moffitt$Basal)
#moffitt signiture--------
moffitt <- as.data.frame(read_excel("D:/PDAC_SCRNA/csv/moffitt.xlsx"))
colnames(moffitt)<- c("Classical","Basal")
moffitt <- moffitt[-c(1),]
View(moffitt)
gs <- list(Classical = moffitt$Classical,
Basal     = moffitt$Basal)
sc.subset <- AddModuleScore(sc.subset, features = gs, ctrl = 100,
name = c("Classical","Basal"))
sc.subset$Classical_minus_Basal <- sc.subset$Classical1 - sc.subset$Basal2
sc.subset$Subtype <- ifelse(sc.subset$Classical_minus_Basal > 0, "Classical","Basal")
#---scaterplot-----
df <- sc.subset@meta.data %>% select (c("Subtype", "Treatment", "orig.ident"))
View(df)
#---scaterplot-----
df <- sc.subset@meta.data %>% select (c("Classical1","Basal2", "Treatment", "orig.ident"))
View(df)
df_treated <- df [df$Treatment=="treated",]
ggplot(df_treated, aes(x="Basal2",y="Classical1"))+geom_point(alpha = 0.25, size = 0.3, stroke = 0)
ggplot(df_treated, aes(x="Basal2",y="Classical1"))+geom_point()
View(df_treated)
View(sc.subset)
View(sc.subset@meta.data)
ggplot(df_treated, aes(x = Basal1, y = Classical1)) +
geom_point(alpha = 0.2, size = 0.3) +
theme_bw()
ggplot(df_treated, aes(x = Basal2, y = Classical1)) +
geom_point(alpha = 0.2, size = 0.3) +
theme_bw()
ggplot(df_treated, aes(x = Basal2, y = Classical1)) +
scale_color_manual("red")
ggplot(df_treated, aes(x = Basal2, y = Classical1)) +
scale_color_manual("red")+
geom_point(alpha = 0.2, size = 0.5) +
theme_bw()
ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
scale_color_manual("red")+
geom_point(alpha = 0.2, size = 0.5) +
theme_bw()
df_treated <- df [df$Treatment=="treated",]
ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
scale_color_manual(values = (treated="red"))+
geom_point(size = 0.5) +
theme_bw()
ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
scale_color_manual(values = c(treated="red"))+
geom_point(size = 0.5) +
theme_bw()
ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
scale_color_manual(values = c("treated"="red"))+
geom_point(size = 0.5) +
theme_bw()
ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
geom_point(size = 0.5) +
scale_color_manual(values = c(treated="red"))+
theme_bw()
ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
geom_point(size = 0.5, color = "red") +
theme_bw()
ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
geom_point(size =1, color = "red") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_bw()
my_theme = theme(
panel.background = element_blank(),
plot.background = element_blank(),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key = element_rect(fill="transparent", colour=NA),
plot.title = element_text(size=12, margin = margin(b = 5),hjust=0,vjust=0.5, family="Arial", face="bold"),
title = element_text(size = 12, margin = margin(b = 5),hjust=0,vjust=0.5, family="Arial", face="bold"),
axis.text.y = element_text(size = 10, margin = margin(r = 5),hjust=1,vjust=0.5, family="Arial", face="bold",colour="black"),
axis.text.x = element_text(size = 10, margin = margin(t = 5),hjust=0.5,vjust=1, family="Arial", face="bold",colour="black"),
axis.title.y = element_text(size = 12, margin = margin(r = 10),angle = 90,hjust=0.5,vjust=0.5, family="Arial", face="bold"),
axis.title.x = element_text(size = 12, margin = margin(t = 10),hjust=0.5,vjust=1, family="Arial", face="bold"),
legend.text=element_text(size=10, family="Arial"),
legend.title=element_text(size=12,family ="Arial"),
legend.key.size=unit(1,"line")
)
ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
geom_point(size =1, color = "red") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +my_theme
ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
geom_point(size =1, color = "red") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +theme_classic()
ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
geom_point(size =0.8, color = "maroon") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +theme_classic()
p1=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
geom_point(size =0.8, color = "maroon") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +theme_classic()
df_treated <- df [df$Treatment=="naive",]
p1=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
geom_point(size =0.8, color = "steelblue") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +theme_classic()
df_treated <- df [df$Treatment=="treated",]
p1=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
geom_point(size =0.8, color = "maroon") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +theme_classic()
df_untreated <- df [df$Treatment=="naive",]
p2=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
geom_point(size =0.8, color = "steelblue") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +theme_classic()
png("plots/classicalbasal.png",width = 300*10, height = 300*5, res = 300)
setwd("D:\\PDAC_SCRNA")
png("plots/moffitt.png",width = 300*10, height = 300*5, res = 300)
p+p1
p=DimPlot(sc.subset, group.by = "Subtype", cols = c("purple","pink")) +umap_theme
p=DimPlot(sc.subset, group.by = "Subtype", cols = c("purple","pink")) +umap_theme
png("plots/classicalbasal.png",width = 300*10, height = 300*5, res = 300)
p2+p1
dev.off()
df_treated <- df [df$Treatment=="treated",]
p1=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
geom_point(size =0.8, color = "maroon") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +theme_classic()
p1
df_untreated <- df [df$Treatment=="naive",]
p2=ggplot(df_untreated, aes(x = Basal2, y = Classical1, fill =Treatment )) +
geom_point(size =0.8, color = "steelblue") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +theme_classic()
png("plots/classicalbasal.png",width = 300*10, height = 300*5, res = 300)
p2+p1
dev.off()
p3<-ggplot(df, aes(Basal1, Classical1, color = Treatment)) +
geom_point(size = 0.4, alpha = 0.3) +
scale_color_manual(values = c(naive = "steelblue", treated = "maroon")) +
theme_bw()
png("plots/classicalbasalboth.png",width = 300*10, height = 300*5, res = 300)
p3
p3<-ggplot(df, aes(Basal2, Classical1, color = Treatment)) +
geom_point(size = 0.4, alpha = 0.3) +
scale_color_manual(values = c(naive = "steelblue", treated = "maroon")) +
theme_bw()
png("plots/classicalbasalboth.png",width = 300*10, height = 300*5, res = 300)
p3
dev.off()
umap_theme = theme(plot.title = element_text(hjust = 0.5),
axis.text = element_blank(),
axis.title = element_text(size = 12),
text = element_text(size = 12, family = "ArialMT"),
axis.ticks = element_blank())
sc.subset$Classical_minus_Basal <- sc.subset$Classical1 - sc.subset$Basal2
sc.subset$Subtype <- ifelse(sc.subset$Classical_minus_Basal > 0, "Classical","Basal")
p=DimPlot(sc.subset, group.by = "Subtype", cols = c("purple","pink")) +umap_theme
p1=DimPlot(sc.subset, group.by = "orig.ident",pt.size = 0.3) +umap_theme
png("plots/moffitt.png",width = 300*10, height = 300*5, res = 300)
p+p1
dev.off()
p1_sample=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =orig.ident )) +
geom_point(size =0.8, color = "maroon") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +theme_classic()
p1_sample=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =orig.ident )) +
geom_point(size =0.8) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +theme_classic()
p1_sample
p1_sample=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =orig.ident )) +
geom_point(size =0.8) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_brewer(palette = "Set2", name = "Sample") +
theme_classic()
p1_sample
p1_sample=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =orig.ident )) +
geom_point(size =0.8) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_brewer(palette = "Set2", name = orig.ident) +
theme_classic()
p1_sample
p1_sample=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =df_treated$orig.ident )) +
geom_point(size =0.8) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_brewer(palette = "Set2", name = orig.ident) +
theme_classic()
p1_sample=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =df_treated$orig.ident )) +
geom_point(size =0.8) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_brewer(palette = "Set2", name = "orig.ident") +
theme_classic()
p1_sample
p1_sample=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =orig.ident )) +
geom_point(size =0.8) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_brewer(palette = "Set2", name = "orig.ident") +
theme_classic()
p1_sample
p1_sample=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =orig.ident )) +
geom_point(size =0.8) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_fill_brewer(palette = "Set2", name = "Sample") +
theme_classic()
p1_sample
p1_sample=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =orig.ident )) +
geom_point(size =0.8, aes(fill = orig.ident)) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_fill_brewer(palette = "Set2", name = "Sample") +
theme_classic()
p1_sample
p1_sample=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =orig.ident )) +
geom_point(size =0.8, aes(fill = orig.ident)) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_brewer(palette = "Set2", name = "Sample") +
theme_classic()
p1_sample
p1_sample=ggplot(df_treated, aes(x = Basal2, y = Classical1, fill =orig.ident )) +
geom_point(size =0.8, aes(colour =orig.ident )) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_brewer(palette = "Set2", name = "Sample") +
theme_classic()
p1_sample
p1_sample=ggplot(df_treated, aes(x = Basal2, y = Classical1)) +
geom_point(size =0.8, aes(colour =orig.ident )) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_brewer(palette = "Set2", name = "Sample") +
theme_classic()
p1_sample
png("plots/treated_bysample.png",width = 300*10, height = 300*5, res = 300)
p1_sample
dev.off()
p2_sample=ggplot(df_untreated, aes(x = Basal2, y = Classical1 )) +
geom_point(size =0.8, aes(colour =orig.ident)) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_brewer(palette = "Set3", name = "Sample") +
theme_classic()
p2_sample
p2_sample=ggplot(df_untreated, aes(x = Basal2, y = Classical1 )) +
geom_point(size =0.8, aes(colour =orig.ident)) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_brewer(palette = "Set1", name = "Sample") +
theme_classic()
p2_sample
p2_sample=ggplot(df_untreated, aes(x = Basal2, y = Classical1 )) +
geom_point(size =0.8, aes(colour =orig.ident)) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_brewer(palette = "Set2", name = "Sample") +
theme_classic()
p2_sample
p2_sample=ggplot(df_untreated, aes(x = Basal2, y = Classical1 )) +
geom_point(size =0.8, aes(colour =orig.ident)) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_brewer(palette = "Set1", name = "Sample") +
theme_classic()
p2_sample
theme_classic()
png("plots/untreated_bysample.png",width = 300*10, height = 300*5, res = 300)
p2_sample
dev.off()
png("plots/untreated_bysample.png",width = 300*5, height = 300*5, res = 300)
p2_sample
dev.off()
png("plots/treated_bysample.png",width = 300*5, height = 300*5, res = 300)
p1_sample
dev.off()
all_samples <- SetIdent(sc.subset,value = "Treatment" )
unique(all_samples@active.ident)
treated_vs_naive <- FindMarkers(sc.subset, ident.1 ="treated", ident.2 = "naive"  )
View(sc.subset)
unique(all_samples@active.ident)
treated_vs_naive <- FindMarkers(sc.subset, ident.1 ="treated", ident.2 = "naive"  )
all_samples <- SetIdent(sc.subset,value = "Treatment" )
unique(all_samples@active.ident)
View(sc.subset)
sc.subset <- SetIdent(sc.subset,value = "Treatment" )
unique(sc.subset@active.ident)
treated_vs_naive <- FindMarkers(sc.subset, ident.1 ="treated", ident.2 = "naive"  )
reactome <- msigdbr(species = "Homo sapiens", category = "C2", subcategory = "CP:REACTOME") |>
select(gs_name, gene_symbol) |> distinct()
library(clusterProfiler)
library(msigdbr)
reactome <- msigdbr(species = "Homo sapiens", category = "C2", subcategory = "CP:REACTOME") |>
select(gs_name, gene_symbol) |> distinct()
reactome <- msigdbr(species = "Homo sapiens", collection  = "C2", subcollection = "CP:REACTOME") |>
select(gs_name, gene_symbol) |> distinct()
treated_vs_naive$score <- sign(treated_vs_naive$avg_log2FC) * (-log10(treated_vs_naive$p_val_adj + 1e-10))
gene_list <- treated_vs_naive$score
names(gene_list) <- rownames(treated_vs_naive)
gene_list<-na.omit(gene_list)
BiocParallel::register(BiocParallel::SerialParam()) #fix serialize error
options(mc.cores = 1)
set.seed(1)
gene_list = sort(gene_list, decreasing = TRUE)
gsea_results=clusterProfiler::GSEA(
geneList = gene_list,
TERM2GENE = reactome,
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
verbose = FALSE
)
View(gsea_results)
View(gsea_results@result)
gsea_results <-gsea_results@result
#reactome <- msigdbr(species = "Homo sapiens", collection  = "C2", subcollection = "CP:REACTOME") |>
# select(gs_name, gene_symbol) |> distinct()
hallmark <- msigdbr(species = "Homo sapiens", collection  = "H") %>%
select(gs_name, gene_symbol) |> distinct()
gsea_results=clusterProfiler::GSEA(
geneList = gene_list,
TERM2GENE = hallmark,
pvalueCutoff = 0.25,
pAdjustMethod = "BH",
verbose = FALSE
)
gsea_results <-gsea_results@result
gsea_results$minus_logFDR= -log10(gsea_results$p.adjust)
p=ggplot(gsea_results, aes(
x = reorder(ID, NES),
y = NES,
fill = NES,
alpha=minus_logFDR,
#size = `-logFDR`
)) +
geom_point(shape = 21, colour = "black",size=10) +
scale_fill_gradient2(
low = "steelblue", mid = "white", high = "red",
midpoint = 0,
name = "Enrichment"
) + scale_alpha(range = c(0.3, 1),
name = "LogFDR") +
labs(
x = "Pathway",
y = "NES",
title = paste0("Treated Vs. Naive")
) +
coord_flip() +my_theme
p
gsea_results<- gsea_results[gsea_results$p.adjust<0.05,]
gsea_results$minus_logFDR= -log10(gsea_results$p.adjust)
p=ggplot(gsea_results, aes(
x = reorder(ID, NES),
y = NES,
fill = NES,
alpha=minus_logFDR,
#size = `-logFDR`
)) +
geom_point(shape = 21, colour = "black",size=10) +
scale_fill_gradient2(
low = "steelblue", mid = "white", high = "red",
midpoint = 0,
name = "Enrichment"
) + scale_alpha(range = c(0.3, 1),
name = "LogFDR") +
labs(
x = "Pathway",
y = "NES",
title = paste0("Treated Vs. Naive")
) +
coord_flip() +my_theme
p=ggplot(gsea_results, aes(
x = reorder(ID, NES),
y = NES,
fill = NES,
alpha=minus_logFDR,
#size = `-logFDR`
)) +
geom_point(shape = 21, colour = "black",size=10) +
scale_fill_gradient2(
low = "steelblue", mid = "white", high = "red",
midpoint = 0,
name = "Enrichment"
) + scale_alpha(range = c(0.3, 1),
name = "LogFDR") +
labs(
x = "Pathway",
y = "NES",
title = paste0("Treated Vs. Naive")
) +
coord_flip() +my_theme
p
png("plots/halmark.png", width = 400*6, height = 300*6 , res = 300)
write.csv(gsea_results,"csv/hallmark_ranked_by_score.csv")
p
dev.off()
gsea_results <-gsea_results@result
gsea_results=clusterProfiler::GSEA(
geneList = gene_list,
TERM2GENE = hallmark,
pvalueCutoff = 0.25,
pAdjustMethod = "BH",
verbose = FALSE
)
gsea_results <-gsea_results@result
write.csv(gsea_results,"csv/hallmark_ranked_by_score.csv")
p
dev.off()
df_minusP03 <- df[df$orig.ident!="P03",]
View(df_minusP03)
p<-scale_color_manual(values = c(treated="red"))+
ggplot(df, aes(Basal1, Classical1, color = Treatment)) +
geom_point(size = 0.4, alpha = 0.3) +
scale_color_manual(values = c(naive = "steelblue", treated = "firebrick")) +
theme_classic()
p<-ggplot(df, aes(Basal1, Classical1, color = Treatment)) +
geom_point(size = 0.8) +
scale_color_manual(values = c(naive = "steelblue", treated = "firebrick")) +
theme_classic()
p
p<-ggplot(df, aes(Basal2, Classical1, color = Treatment)) +
geom_point(size = 0.8) +
scale_color_manual(values = c(naive = "steelblue", treated = "firebrick")) +
theme_classic()
p
p
png("plots/classification_of_epithilial_withp03.png",width = 300*5, height = 300*5, res = 300)
p
dev.off()
p<-ggplot(df_treated, aes(Basal2, Classical1, color = Treatment)) +
geom_point(size = 0.8) +
scale_color_manual(values = c(naive = "steelblue", treated = "firebrick")) +
theme_classic()
png("plots/classification_of_epithilial_no03.png",width = 300*5, height = 300*5, res = 300)
p
dev.off()
p<-ggplot(df_treated, aes(Basal2, Classical1, color = Treatment)) +
geom_point(size = 0.8) +
scale_color_manual(values = c(naive = "steelblue", treated = "firebrick")) +
theme_classic()
png("plots/classification_of_epithilial_no03.png",width = 300*5, height = 300*5, res = 300)
p
dev.off()
p<-ggplot(df_minusP03, aes(Basal2, Classical1, color = Treatment)) +
geom_point(size = 0.8) +
scale_color_manual(values = c(naive = "steelblue", treated = "firebrick")) +
theme_classic()
png("plots/classification_of_epithilial_no03.png",width = 300*5, height = 300*5, res = 300)
p
dev.off()
saveRDS(sc.subset,"epi.rds")
